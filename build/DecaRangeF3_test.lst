
build/DecaRangeF3_test.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000188 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000000 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /tmp/ccGSVg3n.o
f1e0f85f l       *ABS*	00000000 BootRAM
08001708 l       .text	00000000 LoopCopyDataInit
08001700 l       .text	00000000 CopyDataInit
0800171c l       .text	00000000 LoopFillZerobss
08001716 l       .text	00000000 FillZerobss
0800172e l       .text	00000000 LoopForever
08001744 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_fixunsdfsi.o
00000000 l    df *ABS*	00000000 stm32f30x_it.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 ntb_hwctrl.c
00000000 l    df *ABS*	00000000 deca_device.c
20000000 l     O .bss	0000007c dw1000local
00000000 l    df *ABS*	00000000 deca_ranging.c
08000b30 l     F .text	0000000c dw_debug
08000b3c l     F .text	00000028 dw_process_time
08000b64 l     F .text	0000005a dw_getRxQuality.isra.0
08000bc0 l     F .text	00000058 dw_send_ieee_data_delayed.constprop.4
00000000 l    df *ABS*	00000000 deca_spi.c
00000000 l    df *ABS*	00000000 stm32f30x_misc.c
00000000 l    df *ABS*	00000000 stm32f30x_rcc.c
00000000 l    df *ABS*	00000000 stm32f30x_spi.c
00000000 l    df *ABS*	00000000 stm32f30x_syscfg.c
00000000 l    df *ABS*	00000000 stm32f30x_gpio.c
00000000 l    df *ABS*	00000000 stm32f30x_exti.c
00000000 l    df *ABS*	00000000 system_stm32f30x.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 /usr/bin/../lib/gcc/arm-none-eabi/4.9.3/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 /usr/bin/../lib/gcc/arm-none-eabi/4.9.3/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 malloc
00000000 l       *UND*	00000000 __bss_start__
00000000 l       *UND*	00000000 __deregister_frame_info
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
00000000 l       *UND*	00000000 _exit
00000000 l       *UND*	00000000 _Jv_RegisterClasses
00000000 l       *UND*	00000000 __register_frame_info
00000000 l       *UND*	00000000 free
08001744  w    F .text	00000002 RTC_Alarm_IRQHandler
08001744  w    F .text	00000002 TIM8_TRG_COM_IRQHandler
08001744  w    F .text	00000002 TIM8_CC_IRQHandler
08000544 g     F .text	00000002 DebugMon_Handler
08000c18 g     F .text	00000540 decaranging_isr
080014a0 g     F .text	00000024 GPIO_PinAFConfig
08001158 g     F .text	0000005c dw_spi_configprescaler
0800049c g     F .text	0000005a .hidden __floatdidf
08001744  w    F .text	00000002 TIM1_CC_IRQHandler
0800053a g     F .text	00000002 HardFault_Handler
200000a0 g     O .bss	00000004 time_slotdelay
08001744  w    F .text	00000002 USB_HP_IRQHandler
08000566 g     F .text	00000002 SysTick_Handler
080011b4 g     F .text	0000006c NVIC_Init
08001744  w    F .text	00000002 PVD_IRQHandler
0800184c g       .text	00000000 _sidata
08000900 g     F .text	0000001c dwt_writetxfctrl
08000546 g     F .text	00000002 PendSV_Handler
08001280 g     F .text	0000007c SPI_I2S_DeInit
08000538 g     F .text	00000002 NMI_Handler
00000000 g       .comment	00000000 __exidx_end
08001744  w    F .text	00000002 EXTI3_IRQHandler
08000848 g     F .text	0000000c dwt_readrxtimestamp
200000a8 g     O .bss	00000008 time_tx_init
0800079c g     F .text	00000048 dwt_writetodevice
0800184c g       .text	00000000 _etext
20000000 g       .bss	00000000 _sbss
08000b00 g     F .text	0000002e dwt_rxreset
08000a7c g     F .text	00000084 dwt_rxenable
200000b0 g     O .bss	00000035 msgToSend
2000007c g     O .bss	00000001 current_state
0800042c g     F .text	00000022 .hidden __floatsidf
08001744  w    F .text	00000002 EXTI0_IRQHandler
08001744  w    F .text	00000002 I2C2_EV_IRQHandler
08001744  w    F .text	00000002 FPU_IRQHandler
20000090 g     O .bss	00000004 writetospi
08001744  w    F .text	00000002 EXTI2_TS_IRQHandler
08001744  w    F .text	00000002 TIM1_UP_TIM16_IRQHandler
08000540 g     F .text	00000002 UsageFault_Handler
08000654 g     F .text	00000094 dw_init_irq
08001238 g     F .text	00000018 RCC_APB2PeriphClockCmd
080004f8 g     F .text	00000040 .hidden __fixunsdfsi
08000898 g     F .text	00000008 dwt_readsystimestamphi32
08001744  w    F .text	00000002 ADC1_2_IRQHandler
08001420 g     F .text	00000078 GPIO_Init
0800040c g     F .text	0000001e .hidden __aeabi_ui2d
20000000 g       .data	00000000 _sdata
08001744  w    F .text	00000002 SPI1_IRQHandler
08000188 g     F .text	00000000 .hidden __aeabi_drsub
08001744  w    F .text	00000002 TIM6_DAC_IRQHandler
08000450 g     F .text	0000003a .hidden __extendsfdf2
08001744  w    F .text	00000002 TIM8_UP_IRQHandler
08000194 g     F .text	00000276 .hidden __adddf3
00000000 g       .comment	00000000 __exidx_start
08001748 g     F .text	00000050 __libc_init_array
08001744  w    F .text	00000002 DMA2_Channel2_IRQHandler
08001220 g     F .text	00000018 RCC_AHBPeriphClockCmd
08001744  w    F .text	00000002 DMA1_Channel4_IRQHandler
0800040c g     F .text	0000001e .hidden __floatunsidf
08001834 g     F .text	00000000 _init
080013de g     F .text	00000018 SPI_SSOutputCmd
080013b8 g     F .text	00000010 SPI_DataSizeConfig
08001744  w    F .text	00000002 USART3_IRQHandler
200000e5 g     O .bss	00000040 frameToSend
20000128 g     O .bss	00000008 time_rx_resp
080015e8 g     F .text	00000018 EXTI_ClearITPendingBit
0800077a g     F .text	00000022 ntb_busywait_ms
200001c0 g       .bss	00000000 _ebss
08001744  w    F .text	00000002 DMA1_Channel7_IRQHandler
080016fc  w    F .text	00000034 Reset_Handler
08001744  w    F .text	00000002 CAN1_RX1_IRQHandler
08001744  w    F .text	00000002 UART5_IRQHandler
20000130 g     O .bss	00000024 user_config
08001744  w    F .text	00000002 ADC3_IRQHandler
20000154 g     O .bss	00000040 rx_buffer
08000a24 g     F .text	00000058 dwt_forcetrxoff
0800063c g     F .text	0000000c led_on
08001498 g     F .text	00000004 GPIO_SetBits
08001744  w    F .text	00000002 TIM4_IRQHandler
08000194 g     F .text	00000276 .hidden __aeabi_dadd
08001744  w    F .text	00000002 DMA2_Channel1_IRQHandler
0800048c g     F .text	0000006a .hidden __aeabi_ul2d
08001744  w    F .text	00000002 I2C1_EV_IRQHandler
20000094 g     O .bss	00000004 Sleep
20000198 g     O .bss	00000008 time_tx_bcn
0800058c g     F .text	000000b0 ntb_init_gpio
08001744  w    F .text	00000002 DMA1_Channel6_IRQHandler
08001744  w    F .text	00000002 UART4_IRQHandler
08001744  w    F .text	00000002 DMA2_Channel4_IRQHandler
08001744  w    F .text	00000002 TIM3_IRQHandler
08001744  w    F .text	00000002 RCC_IRQHandler
20000000 g       .bss	00000000 _bss
08001744  w    F .text	00000002 DMA1_Channel1_IRQHandler
08000190 g     F .text	0000027a .hidden __aeabi_dsub
08001744 g       .text	00000002 Default_Handler
08001744  w    F .text	00000002 USBWakeUp_RMP_IRQHandler
0800048c g     F .text	0000006a .hidden __floatundidf
08001744  w    F .text	00000002 EXTI15_10_IRQHandler
08000854 g     F .text	00000044 dwt_read32bitoffsetreg
080014c4 g     F .text	00000104 EXTI_Init
0800149c g     F .text	00000004 GPIO_ResetBits
08001744  w    F .text	00000002 TIM7_IRQHandler
0800042c g     F .text	00000022 .hidden __aeabi_i2d
08000548 g     F .text	0000001e EXTI9_5_IRQHandler
20000098 g     O .bss	00000004 readfromspi
08001744  w    F .text	00000002 TAMPER_STAMP_IRQHandler
08001744  w    F .text	00000002 RTC_WKUP_IRQHandler
080006e8 g     F .text	00000080 ntb_init_spidw
0800091c g     F .text	0000002e dwt_entersleepaftertx
20000084 g     O .bss	00000004 dwr_initialized
080015c8 g     F .text	00000020 EXTI_GetITStatus
08001744  w    F .text	00000002 SPI2_IRQHandler
20000088 g     O .bss	00000008 time_last
08001798 g     F .text	0000009a memset
0800053c g     F .text	00000002 MemManage_Handler
08000568 g     F .text	00000022 main
08000804 g     F .text	00000044 dwt_readfromdevice
08000542 g     F .text	00000002 SVC_Handler
08001744  w    F .text	00000002 DMA2_Channel5_IRQHandler
00000000  w      *UND*	00000000 __init_array_end
08000958 g     F .text	00000090 dwt_starttx
0800049c g     F .text	0000005a .hidden __aeabi_l2d
08001744  w    F .text	00000002 DMA1_Channel5_IRQHandler
08001744  w    F .text	00000002 USB_LP_IRQHandler
08001744  w    F .text	00000002 EXTI4_IRQHandler
08001744  w    F .text	00000002 USB_LP_CAN1_RX0_IRQHandler
080013a0 g     F .text	00000018 SPI_Cmd
08001600 g     F .text	000000fc SystemInit
08001840 g     F .text	00000000 _fini
08001744  w    F .text	00000002 TIM1_TRG_COM_TIM17_IRQHandler
08001744  w    F .text	00000002 USB_HP_CAN1_TX_IRQHandler
08000648 g     F .text	0000000c led_off
08001744  w    F .text	00000002 DMA1_Channel3_IRQHandler
08001744  w    F .text	00000002 ADC4_IRQHandler
00000000  w      *UND*	00000000 __preinit_array_end
08001744  w    F .text	00000002 WWDG_IRQHandler
080007e4 g     F .text	00000020 dwt_writetxdata
08001268 g     F .text	00000018 RCC_APB1PeriphResetCmd
20000000 g       .data	00000000 _data
08001744  w    F .text	00000002 TIM2_IRQHandler
080004f8 g     F .text	00000040 .hidden __aeabi_d2uiz
08001744  w    F .text	00000002 COMP7_IRQHandler
080008a0 g     F .text	00000030 dwt_read16bitoffsetreg
20008000 g       *ABS*	00000000 _estack
08001744  w    F .text	00000002 COMP1_2_3_IRQHandler
08001744  w    F .text	00000002 EXTI1_IRQHandler
20000000 g       .data	00000000 _edata
080013c8 g     F .text	00000016 SPI_RxFIFOThresholdConfig
200001a0 g     O .bss	00000008 time_tx_fin
08001744  w    F .text	00000002 USART2_IRQHandler
080013f6 g     F .text	0000002a SYSCFG_EXTILineConfig
08001744  w    F .text	00000002 COMP4_5_6_IRQHandler
20000080 g     O .bss	00000004 timer_overflows
08000000 g     O .isr_vector	00000000 g_pfnVectors
08001744  w    F .text	00000002 I2C2_ER_IRQHandler
08001744  w    F .text	00000002 DMA1_Channel2_IRQHandler
0800094c g     F .text	0000000a dwt_setdelayedtrxtime
08001744  w    F .text	00000002 TIM8_BRK_IRQHandler
200001a8 g     O .bss	00000008 time_rx_fin
00000000  w      *UND*	00000000 __init_array_start
08001744  w    F .text	00000002 CAN1_SCE_IRQHandler
08001744  w    F .text	00000002 FLASH_IRQHandler
0800053e g     F .text	00000002 BusFault_Handler
08001744  w    F .text	00000002 USART1_IRQHandler
200001b0 g     O .bss	00000008 time_tx_resp
08001744  w    F .text	00000002 SPI3_IRQHandler
08000768 g     F .text	00000012 ntb_init_hw
08001250 g     F .text	00000018 RCC_APB2PeriphResetCmd
08001744  w    F .text	00000002 I2C1_ER_IRQHandler
080012fc g     F .text	000000a4 SPI_Init
08000450 g     F .text	0000003a .hidden __aeabi_f2d
080008d0 g     F .text	0000002e dwt_write32bitoffsetreg
08000190 g     F .text	0000027a .hidden __subdf3
00000000  w      *UND*	00000000 __preinit_array_start
080009e8 g     F .text	0000003a dwt_syncrxbufptrs
08001744  w    F .text	00000002 USBWakeUp_IRQHandler
200001b8 g     O .bss	00000008 time_rx_init
08001744  w    F .text	00000002 DMA2_Channel3_IRQHandler
08001744  w    F .text	00000002 TIM1_BRK_TIM15_IRQHandler



Disassembly of section .text:

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002c6:	f1a4 0401 	sub.w	r4, r4, #1
 80002ca:	d1e9      	bne.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f092 0f00 	teq	r2, #0
 8000472:	bf14      	ite	ne
 8000474:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e720      	b.n	80002cc <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aedc 	beq.w	800027a <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6c1      	b.n	800027a <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_d2uiz>:
 80004f8:	004a      	lsls	r2, r1, #1
 80004fa:	d211      	bcs.n	8000520 <__aeabi_d2uiz+0x28>
 80004fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000500:	d211      	bcs.n	8000526 <__aeabi_d2uiz+0x2e>
 8000502:	d50d      	bpl.n	8000520 <__aeabi_d2uiz+0x28>
 8000504:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000508:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800050c:	d40e      	bmi.n	800052c <__aeabi_d2uiz+0x34>
 800050e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000512:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000516:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800051a:	fa23 f002 	lsr.w	r0, r3, r2
 800051e:	4770      	bx	lr
 8000520:	f04f 0000 	mov.w	r0, #0
 8000524:	4770      	bx	lr
 8000526:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800052a:	d102      	bne.n	8000532 <__aeabi_d2uiz+0x3a>
 800052c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000530:	4770      	bx	lr
 8000532:	f04f 0000 	mov.w	r0, #0
 8000536:	4770      	bx	lr

08000538 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000538:	4770      	bx	lr

0800053a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 800053a:	e7fe      	b.n	800053a <HardFault_Handler>

0800053c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 800053c:	e7fe      	b.n	800053c <MemManage_Handler>

0800053e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 800053e:	e7fe      	b.n	800053e <BusFault_Handler>

08000540 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000540:	e7fe      	b.n	8000540 <UsageFault_Handler>

08000542 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000542:	4770      	bx	lr

08000544 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000544:	4770      	bx	lr

08000546 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000546:	4770      	bx	lr

08000548 <EXTI9_5_IRQHandler>:
}


// Handle DW1000 interrupts (IRQ)
void EXTI9_5_IRQHandler(void)
{
 8000548:	b508      	push	{r3, lr}
  // Make sure that interrupt flag is set 
  if (EXTI_GetITStatus(EXTI_Line5) != RESET) {
 800054a:	2005      	movs	r0, #5
 800054c:	f001 f83c 	bl	80015c8 <EXTI_GetITStatus>
 8000550:	b140      	cbz	r0, 8000564 <EXTI9_5_IRQHandler+0x1c>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000552:	b672      	cpsid	i

    __disable_irq();
    decaranging_isr();
 8000554:	f000 fb60 	bl	8000c18 <decaranging_isr>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000558:	b662      	cpsie	i
    __enable_irq();

    // Clear interrupt flag 
    EXTI_ClearITPendingBit(EXTI_Line5);
 800055a:	2005      	movs	r0, #5
  }
}
 800055c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    __disable_irq();
    decaranging_isr();
    __enable_irq();

    // Clear interrupt flag 
    EXTI_ClearITPendingBit(EXTI_Line5);
 8000560:	f001 b842 	b.w	80015e8 <EXTI_ClearITPendingBit>
 8000564:	bd08      	pop	{r3, pc}

08000566 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000566:	4770      	bx	lr

08000568 <main>:
  TIM_Cmd(TIM3, ENABLE);
}
*/

int main()
{
 8000568:	b508      	push	{r3, lr}
  // Set vector table offset immediately (used for IAP)
  //NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x20000);

  
  // initialize NTB tag hardware
  ntb_init_hw();
 800056a:	f000 f8fd 	bl	8000768 <ntb_init_hw>
  if( dw_status == DWR_RETURN_ERR )
    led_toggle_fast();
  */

  // DWR done initializing. Increase SPI speed
  dw_spi_configprescaler(SPI_BaudRatePrescaler_4);
 800056e:	2008      	movs	r0, #8
 8000570:	f000 fdf2 	bl	8001158 <dw_spi_configprescaler>
   
  while(1)
  {

      
      led_on();
 8000574:	f000 f862 	bl	800063c <led_on>
      ntb_busywait_ms(100);
 8000578:	2064      	movs	r0, #100	; 0x64
 800057a:	f000 f8fe 	bl	800077a <ntb_busywait_ms>
      
      //decaranging_sendtwr();
      led_off();
 800057e:	f000 f863 	bl	8000648 <led_off>
      ntb_busywait_ms(100);
 8000582:	2064      	movs	r0, #100	; 0x64
 8000584:	f000 f8f9 	bl	800077a <ntb_busywait_ms>
      //ntb_busywait_ms(10);
    
      //SPISend(0x00);        // Transmit dummy byte and receive data
      
      //GPIO_SetBits(GPIOA, GPIO_Pin_8);    // Set PA8 (Chip Select) high   
  }
 8000588:	e7f4      	b.n	8000574 <main+0xc>
	...

0800058c <ntb_init_gpio>:
  dw_init_irq();
}

/* Function to enable GPIO ports for DW_SPI and LED  */
void ntb_init_gpio()
{
 800058c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  GPIO_InitTypeDef  GPIO_InitStructure;

  // Enable Port A clock for SPI1 pins
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 800058e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000592:	2101      	movs	r1, #1
 8000594:	f000 fe44 	bl	8001220 <RCC_AHBPeriphClockCmd>

  // Enable Port B --> port on which the LED is
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8000598:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800059c:	2101      	movs	r1, #1
 800059e:	f000 fe3f 	bl	8001220 <RCC_AHBPeriphClockCmd>
  //  Configure pins used by SPI1:
  //    PA5 = SCLK
  //    PA6 = MISO
  //    PA7 = MOSI
  //
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_6 | GPIO_Pin_5;
 80005a2:	23e0      	movs	r3, #224	; 0xe0
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80005a4:	2400      	movs	r4, #0
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80005a6:	2503      	movs	r5, #3
  //  Configure pins used by SPI1:
  //    PA5 = SCLK
  //    PA6 = MISO
  //    PA7 = MOSI
  //
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_6 | GPIO_Pin_5;
 80005a8:	9300      	str	r3, [sp, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 80005aa:	4669      	mov	r1, sp
  //    PA5 = SCLK
  //    PA6 = MISO
  //    PA7 = MOSI
  //
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_6 | GPIO_Pin_5;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80005ac:	2302      	movs	r3, #2
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 80005ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  //    PA5 = SCLK
  //    PA6 = MISO
  //    PA7 = MOSI
  //
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_6 | GPIO_Pin_5;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80005b2:	f88d 3004 	strb.w	r3, [sp, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80005b6:	f88d 4006 	strb.w	r4, [sp, #6]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80005ba:	f88d 5005 	strb.w	r5, [sp, #5]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80005be:	f88d 4007 	strb.w	r4, [sp, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 80005c2:	f000 ff2d 	bl	8001420 <GPIO_Init>

  //Connect SPI1 pins to SPI alternate function.
  //
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource5, GPIO_AF_5);
 80005c6:	2105      	movs	r1, #5
 80005c8:	460a      	mov	r2, r1
 80005ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ce:	f000 ff67 	bl	80014a0 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_5);
 80005d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d6:	2106      	movs	r1, #6
 80005d8:	2205      	movs	r2, #5
 80005da:	f000 ff61 	bl	80014a0 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource7, GPIO_AF_5);
 80005de:	2205      	movs	r2, #5
 80005e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e4:	2107      	movs	r1, #7
 80005e6:	f000 ff5b 	bl	80014a0 <GPIO_PinAFConfig>
  //  Configure the Chip Select for SPI1:
  //    PA8 - SPI1 chip select pin.
  //    
  //
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80005ea:	2601      	movs	r6, #1

  //  Configure the Chip Select for SPI1:
  //    PA8 - SPI1 chip select pin.
  //    
  //
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 80005ec:	f44f 7780 	mov.w	r7, #256	; 0x100
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_Init(GPIOA, &GPIO_InitStructure);  
 80005f0:	4669      	mov	r1, sp
 80005f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  //  Configure the Chip Select for SPI1:
  //    PA8 - SPI1 chip select pin.
  //    
  //
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 80005f6:	9700      	str	r7, [sp, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80005f8:	f88d 6004 	strb.w	r6, [sp, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80005fc:	f88d 4006 	strb.w	r4, [sp, #6]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000600:	f88d 5005 	strb.w	r5, [sp, #5]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000604:	f88d 6007 	strb.w	r6, [sp, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);  
 8000608:	f000 ff0a 	bl	8001420 <GPIO_Init>

  //  Set PA8 high as we will be using active low for the
  //  device select.
  //
  
  GPIO_SetBits(GPIOA, GPIO_Pin_8);
 800060c:	4639      	mov	r1, r7
 800060e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000612:	f000 ff41 	bl	8001498 <GPIO_SetBits>

  // Configure LED on PB4 in output pushpull mode
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 8000616:	2310      	movs	r3, #16
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL; 
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000618:	4807      	ldr	r0, [pc, #28]	; (8000638 <ntb_init_gpio+0xac>)
  //
  
  GPIO_SetBits(GPIOA, GPIO_Pin_8);

  // Configure LED on PB4 in output pushpull mode
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 800061a:	9300      	str	r3, [sp, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL; 
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 800061c:	4669      	mov	r1, sp
  
  GPIO_SetBits(GPIOA, GPIO_Pin_8);

  // Configure LED on PB4 in output pushpull mode
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800061e:	f88d 6004 	strb.w	r6, [sp, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000622:	f88d 4006 	strb.w	r4, [sp, #6]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000626:	f88d 5005 	strb.w	r5, [sp, #5]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL; 
 800062a:	f88d 4007 	strb.w	r4, [sp, #7]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 800062e:	f000 fef7 	bl	8001420 <GPIO_Init>

}
 8000632:	b003      	add	sp, #12
 8000634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000636:	bf00      	nop
 8000638:	48000400 	.word	0x48000400

0800063c <led_on>:

void led_on()
{
  GPIO_SetBits(GPIOB, GPIO_Pin_4);
 800063c:	4801      	ldr	r0, [pc, #4]	; (8000644 <led_on+0x8>)
 800063e:	2110      	movs	r1, #16
 8000640:	f000 bf2a 	b.w	8001498 <GPIO_SetBits>
 8000644:	48000400 	.word	0x48000400

08000648 <led_off>:
}

void led_off()
{
  GPIO_ResetBits(GPIOB, GPIO_Pin_4);
 8000648:	4801      	ldr	r0, [pc, #4]	; (8000650 <led_off+0x8>)
 800064a:	2110      	movs	r1, #16
 800064c:	f000 bf26 	b.w	800149c <GPIO_ResetBits>
 8000650:	48000400 	.word	0x48000400

08000654 <dw_init_irq>:


// This function configures the RST and IRQ pins for the DW

void dw_init_irq()
{
 8000654:	b5f0      	push	{r4, r5, r6, r7, lr}
  // Configure the DW RSTn pin : PB8
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_8;
  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP; 
  GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000656:	4e23      	ldr	r6, [pc, #140]	; (80006e4 <dw_init_irq+0x90>)


// This function configures the RST and IRQ pins for the DW

void dw_init_irq()
{
 8000658:	b087      	sub	sp, #28
  GPIO_InitTypeDef  GPIO_InitStruct;
  EXTI_InitTypeDef EXTI_InitStruct;
  NVIC_InitTypeDef NVIC_InitStruct;

  // Enable clock for port B
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 800065a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800065e:	2101      	movs	r1, #1
 8000660:	f000 fdde 	bl	8001220 <RCC_AHBPeriphClockCmd>

  // Configure the DW RSTn pin : PB8
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_8;
  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8000664:	2401      	movs	r4, #1

  // Enable clock for port B
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);

  // Configure the DW RSTn pin : PB8
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_8;
 8000666:	f44f 7580 	mov.w	r5, #256	; 0x100
  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 800066a:	2703      	movs	r7, #3
  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP; 
  GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066c:	4630      	mov	r0, r6
 800066e:	a902      	add	r1, sp, #8

  // Enable clock for port B
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);

  // Configure the DW RSTn pin : PB8
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_8;
 8000670:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8000672:	f88d 400c 	strb.w	r4, [sp, #12]
  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8000676:	f88d 700d 	strb.w	r7, [sp, #13]
  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP; 
 800067a:	f88d 400f 	strb.w	r4, [sp, #15]
  GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067e:	f000 fecf 	bl	8001420 <GPIO_Init>

  GPIO_SetBits(GPIOB, GPIO_Pin_8);
 8000682:	4630      	mov	r0, r6
 8000684:	4629      	mov	r1, r5
 8000686:	f000 ff07 	bl	8001498 <GPIO_SetBits>

  // Configure the DW IRQ pin : PB9 
  GPIO_InitStruct.GPIO_Pin = DW_IRQ_PIN;
 800068a:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 800068e:	2500      	movs	r5, #0
  GPIO_Init(GPIOB, &GPIO_InitStruct);

  GPIO_SetBits(GPIOB, GPIO_Pin_8);

  // Configure the DW IRQ pin : PB9 
  GPIO_InitStruct.GPIO_Pin = DW_IRQ_PIN;
 8000690:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(DW_IRQ_PORT, &GPIO_InitStruct);
 8000692:	4630      	mov	r0, r6
  GPIO_SetBits(GPIOB, GPIO_Pin_8);

  // Configure the DW IRQ pin : PB9 
  GPIO_InitStruct.GPIO_Pin = DW_IRQ_PIN;
  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000694:	2302      	movs	r3, #2
  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(DW_IRQ_PORT, &GPIO_InitStruct);
 8000696:	a902      	add	r1, sp, #8
  GPIO_SetBits(GPIOB, GPIO_Pin_8);

  // Configure the DW IRQ pin : PB9 
  GPIO_InitStruct.GPIO_Pin = DW_IRQ_PIN;
  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000698:	f88d 300f 	strb.w	r3, [sp, #15]

  GPIO_SetBits(GPIOB, GPIO_Pin_8);

  // Configure the DW IRQ pin : PB9 
  GPIO_InitStruct.GPIO_Pin = DW_IRQ_PIN;
  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 800069c:	f88d 500c 	strb.w	r5, [sp, #12]
  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 80006a0:	f88d 700d 	strb.w	r7, [sp, #13]
  GPIO_Init(DW_IRQ_PORT, &GPIO_InitStruct);
 80006a4:	f000 febc 	bl	8001420 <GPIO_Init>
  SYSCFG_EXTILineConfig(DW_IRQ_EXTI, DW_IRQ_PSOURCE);
 80006a8:	2109      	movs	r1, #9
 80006aa:	4620      	mov	r0, r4
 80006ac:	f000 fea3 	bl	80013f6 <SYSCFG_EXTILineConfig>

  // Configure the EXTI for DW IRQ
  EXTI_InitStruct.EXTI_Line = DW_IRQ_LINE;
 80006b0:	2305      	movs	r3, #5
 80006b2:	9304      	str	r3, [sp, #16]
  EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising;
  EXTI_InitStruct.EXTI_LineCmd = ENABLE;
  EXTI_Init(&EXTI_InitStruct);
 80006b4:	a804      	add	r0, sp, #16
  SYSCFG_EXTILineConfig(DW_IRQ_EXTI, DW_IRQ_PSOURCE);

  // Configure the EXTI for DW IRQ
  EXTI_InitStruct.EXTI_Line = DW_IRQ_LINE;
  EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising;
 80006b6:	2308      	movs	r3, #8
 80006b8:	f88d 3015 	strb.w	r3, [sp, #21]
  GPIO_Init(DW_IRQ_PORT, &GPIO_InitStruct);
  SYSCFG_EXTILineConfig(DW_IRQ_EXTI, DW_IRQ_PSOURCE);

  // Configure the EXTI for DW IRQ
  EXTI_InitStruct.EXTI_Line = DW_IRQ_LINE;
  EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 80006bc:	f88d 5014 	strb.w	r5, [sp, #20]
  EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising;
  EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 80006c0:	f88d 4016 	strb.w	r4, [sp, #22]
  EXTI_Init(&EXTI_InitStruct);
 80006c4:	f000 fefe 	bl	80014c4 <EXTI_Init>

  NVIC_InitStruct.NVIC_IRQChannel = DW_IRQ_CHNL;
 80006c8:	2317      	movs	r3, #23
  NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0x00;
  NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x00;
  NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStruct);
 80006ca:	a801      	add	r0, sp, #4
  EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising;
  EXTI_InitStruct.EXTI_LineCmd = ENABLE;
  EXTI_Init(&EXTI_InitStruct);

  NVIC_InitStruct.NVIC_IRQChannel = DW_IRQ_CHNL;
 80006cc:	f88d 3004 	strb.w	r3, [sp, #4]
  NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0x00;
 80006d0:	f88d 5005 	strb.w	r5, [sp, #5]
  NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x00;
 80006d4:	f88d 5006 	strb.w	r5, [sp, #6]
  NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 80006d8:	f88d 4007 	strb.w	r4, [sp, #7]
  NVIC_Init(&NVIC_InitStruct);
 80006dc:	f000 fd6a 	bl	80011b4 <NVIC_Init>
}
 80006e0:	b007      	add	sp, #28
 80006e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006e4:	48000400 	.word	0x48000400

080006e8 <ntb_init_spidw>:


void ntb_init_spidw()
{
 80006e8:	b570      	push	{r4, r5, r6, lr}

  
  SPI_InitTypeDef SPI_InitStruct;
  

  SPI_I2S_DeInit(SPI1);
 80006ea:	4c1e      	ldr	r4, [pc, #120]	; (8000764 <ntb_init_spidw+0x7c>)
  NVIC_Init(&NVIC_InitStruct);
}


void ntb_init_spidw()
{
 80006ec:	b086      	sub	sp, #24

  
  SPI_InitTypeDef SPI_InitStruct;
  

  SPI_I2S_DeInit(SPI1);
 80006ee:	4620      	mov	r0, r4
 80006f0:	f000 fdc6 	bl	8001280 <SPI_I2S_DeInit>

  /* ------------ Fire up SPI --------------- */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 80006f4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80006f8:	2101      	movs	r1, #1
 80006fa:	f000 fd9d 	bl	8001238 <RCC_APB2PeriphClockCmd>
  /* configure SPI1 in Mode 0 
   * CPOL = 0 --> clock is low when idle
   * CPHA = 0 --> data is sampled at the first edge
   */
  SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
  SPI_InitStruct.SPI_Mode = SPI_Mode_Master;  
 80006fe:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000702:	f8ad 3006 	strh.w	r3, [sp, #6]
  SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b; 
  SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;       
  SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
  SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8000706:	f44f 7300 	mov.w	r3, #512	; 0x200
 800070a:	f8ad 300e 	strh.w	r3, [sp, #14]
  SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_128; // 4-64
 800070e:	2330      	movs	r3, #48	; 0x30

  /* configure SPI1 in Mode 0 
   * CPOL = 0 --> clock is low when idle
   * CPHA = 0 --> data is sampled at the first edge
   */
  SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000710:	2500      	movs	r5, #0
  SPI_InitStruct.SPI_Mode = SPI_Mode_Master;  
  SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b; 
 8000712:	f44f 66e0 	mov.w	r6, #1792	; 0x700
  SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;       
  SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
  SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
  SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_128; // 4-64
 8000716:	f8ad 3010 	strh.w	r3, [sp, #16]
  SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
  SPI_InitStruct.SPI_CRCPolynomial = 7;

  SPI_Init(SPI1, &SPI_InitStruct); 
 800071a:	4620      	mov	r0, r4
  SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;       
  SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
  SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
  SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_128; // 4-64
  SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
  SPI_InitStruct.SPI_CRCPolynomial = 7;
 800071c:	2307      	movs	r3, #7

  SPI_Init(SPI1, &SPI_InitStruct); 
 800071e:	a901      	add	r1, sp, #4
  SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;       
  SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
  SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
  SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_128; // 4-64
  SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
  SPI_InitStruct.SPI_CRCPolynomial = 7;
 8000720:	f8ad 3014 	strh.w	r3, [sp, #20]

  /* configure SPI1 in Mode 0 
   * CPOL = 0 --> clock is low when idle
   * CPHA = 0 --> data is sampled at the first edge
   */
  SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000724:	f8ad 5004 	strh.w	r5, [sp, #4]
  SPI_InitStruct.SPI_Mode = SPI_Mode_Master;  
  SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b; 
 8000728:	f8ad 6008 	strh.w	r6, [sp, #8]
  SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;       
 800072c:	f8ad 500a 	strh.w	r5, [sp, #10]
  SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8000730:	f8ad 500c 	strh.w	r5, [sp, #12]
  SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
  SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_128; // 4-64
  SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
 8000734:	f8ad 5012 	strh.w	r5, [sp, #18]
  SPI_InitStruct.SPI_CRCPolynomial = 7;

  SPI_Init(SPI1, &SPI_InitStruct); 
 8000738:	f000 fde0 	bl	80012fc <SPI_Init>

  // Configure the data size for SPI transfers
  SPI_DataSizeConfig(SPI1, SPI_DataSize_8b);
 800073c:	4620      	mov	r0, r4
 800073e:	4631      	mov	r1, r6
 8000740:	f000 fe3a 	bl	80013b8 <SPI_DataSizeConfig>

  /* Initialize the FIFO threshold */
  SPI_RxFIFOThresholdConfig(SPI1, SPI_RxFIFOThreshold_QF);
 8000744:	4620      	mov	r0, r4
 8000746:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800074a:	f000 fe3d 	bl	80013c8 <SPI_RxFIFOThresholdConfig>
  

  // Disable SPI SS output
  SPI_SSOutputCmd(SPI1, DISABLE);
 800074e:	4620      	mov	r0, r4
 8000750:	4629      	mov	r1, r5
 8000752:	f000 fe44 	bl	80013de <SPI_SSOutputCmd>


  // Enable SPI
  SPI_Cmd(SPI1, ENABLE);
 8000756:	4620      	mov	r0, r4
 8000758:	2101      	movs	r1, #1
 800075a:	f000 fe21 	bl	80013a0 <SPI_Cmd>

  

  // ---------- Turn off orange LED to say we're done -------------
  //dw_sleep_msec(500);
}
 800075e:	b006      	add	sp, #24
 8000760:	bd70      	pop	{r4, r5, r6, pc}
 8000762:	bf00      	nop
 8000764:	40013000 	.word	0x40013000

08000768 <ntb_init_hw>:



/* Function definitions */
void ntb_init_hw()
{
 8000768:	b508      	push	{r3, lr}
  //ntb_init_uid();
  //ntb_init_gpio();  
  //ntb_deinit_spiexp();
  ntb_init_gpio();
 800076a:	f7ff ff0f 	bl	800058c <ntb_init_gpio>
  ntb_init_spidw();
 800076e:	f7ff ffbb 	bl	80006e8 <ntb_init_spidw>
  dw_init_irq();
}
 8000772:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  //ntb_init_uid();
  //ntb_init_gpio();  
  //ntb_deinit_spiexp();
  ntb_init_gpio();
  ntb_init_spidw();
  dw_init_irq();
 8000776:	f7ff bf6d 	b.w	8000654 <dw_init_irq>

0800077a <ntb_busywait_ms>:
	NVIC_SystemReset();
}

//Quick hack, approximately 1ms delay
void ntb_busywait_ms(int ms)
{
 800077a:	b082      	sub	sp, #8
   while (ms-- > 0) {
 800077c:	2800      	cmp	r0, #0
 800077e:	dd0b      	ble.n	8000798 <ntb_busywait_ms+0x1e>
      volatile int x=5971;
 8000780:	f241 7353 	movw	r3, #5971	; 0x1753
 8000784:	9301      	str	r3, [sp, #4]
      while (x-- > 0)
 8000786:	9b01      	ldr	r3, [sp, #4]
 8000788:	1e5a      	subs	r2, r3, #1
 800078a:	2b00      	cmp	r3, #0
 800078c:	9201      	str	r2, [sp, #4]
 800078e:	dd01      	ble.n	8000794 <ntb_busywait_ms+0x1a>
         __asm("nop");
 8000790:	bf00      	nop
 8000792:	e7f8      	b.n	8000786 <ntb_busywait_ms+0xc>
 8000794:	3801      	subs	r0, #1
 8000796:	e7f1      	b.n	800077c <ntb_busywait_ms+0x2>
   }
}
 8000798:	b002      	add	sp, #8
 800079a:	4770      	bx	lr

0800079c <dwt_writetodevice>:
    uint16_t     recordNumber,
    uint16_t     index,
    uint32_t     length,
    const uint8_t *buffer
)
{
 800079c:	b510      	push	{r4, lr}
 800079e:	b082      	sub	sp, #8
#ifdef DWT_API_ERROR_CHECK
    if (recordNumber > 0x3F) return DWT_ERROR ;                    // record number is limited to 6-bits.
#endif
    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)

    if (index == 0)                                         // for index of 0, no sub-index is required
 80007a0:	b1b9      	cbz	r1, 80007d2 <dwt_writetodevice+0x36>
        if (index > 0x7FFF) return DWT_ERROR ;                     // index is limited to 15-bits.
        if ((index + length)> 0x7FFF) return DWT_ERROR ;           // sub-addressable area is limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ;               // bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id

        if (index <= 127)                                   // for non-zero index < 127, just a single sub-index byte is required
 80007a2:	297f      	cmp	r1, #127	; 0x7f
    {
#ifdef DWT_API_ERROR_CHECK
        if (index > 0x7FFF) return DWT_ERROR ;                     // index is limited to 15-bits.
        if ((index + length)> 0x7FFF) return DWT_ERROR ;           // sub-addressable area is limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ;               // bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 80007a4:	f060 003f 	orn	r0, r0, #63	; 0x3f
 80007a8:	f88d 0004 	strb.w	r0, [sp, #4]
        {
            header[cnt++] = (uint8_t)index ;                  // bit-7 zero means no extension, bits 6-0 is index.
        }
        else
        {
            header[cnt++] = 0x80 | (uint8_t)(index) ;           // bit-7 one means extended index, bits 6-0 is low seven bits of index.
 80007ac:	bf83      	ittte	hi
 80007ae:	f061 007f 	ornhi	r0, r1, #127	; 0x7f
            header[cnt++] =  (uint8_t) (index >> 7) ;           // 8-bit value = high eight bits of index.
 80007b2:	09c9      	lsrhi	r1, r1, #7
        {
            header[cnt++] = (uint8_t)index ;                  // bit-7 zero means no extension, bits 6-0 is index.
        }
        else
        {
            header[cnt++] = 0x80 | (uint8_t)(index) ;           // bit-7 one means extended index, bits 6-0 is low seven bits of index.
 80007b4:	f88d 0005 	strbhi.w	r0, [sp, #5]
#endif
        header[cnt++] = 0xC0 | recordNumber ;               // bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id

        if (index <= 127)                                   // for non-zero index < 127, just a single sub-index byte is required
        {
            header[cnt++] = (uint8_t)index ;                  // bit-7 zero means no extension, bits 6-0 is index.
 80007b8:	f88d 1005 	strbls.w	r1, [sp, #5]
 80007bc:	bf92      	itee	ls
 80007be:	2002      	movls	r0, #2
        }
        else
        {
            header[cnt++] = 0x80 | (uint8_t)(index) ;           // bit-7 one means extended index, bits 6-0 is low seven bits of index.
            header[cnt++] =  (uint8_t) (index >> 7) ;           // 8-bit value = high eight bits of index.
 80007c0:	f88d 1006 	strbhi.w	r1, [sp, #6]
 80007c4:	2003      	movhi	r0, #3
        }
    }
    
    // write it to the SPI
    return writetospi(cnt,header,length,buffer);
 80007c6:	4906      	ldr	r1, [pc, #24]	; (80007e0 <dwt_writetodevice+0x44>)
 80007c8:	680c      	ldr	r4, [r1, #0]
 80007ca:	a901      	add	r1, sp, #4
 80007cc:	47a0      	blx	r4

} // end dwt_writetodevice()
 80007ce:	b002      	add	sp, #8
 80007d0:	bd10      	pop	{r4, pc}
#endif
    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)

    if (index == 0)                                         // for index of 0, no sub-index is required
    {
        header[cnt++] = 0x80 | recordNumber ;               // bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 80007d2:	f060 007f 	orn	r0, r0, #127	; 0x7f
 80007d6:	f88d 0004 	strb.w	r0, [sp, #4]
 80007da:	2001      	movs	r0, #1
 80007dc:	e7f3      	b.n	80007c6 <dwt_writetodevice+0x2a>
 80007de:	bf00      	nop
 80007e0:	20000090 	.word	0x20000090

080007e4 <dwt_writetxdata>:
 *
 * returns DWT_DECA_SUCCESS for success, or DWT_DECA_ERROR for error
 */
#pragma GCC optimize ("O3")
int dwt_writetxdata(uint16_t txFrameLength, uint8_t *txFrameBytes, uint16_t txBufferOffset)
{
 80007e4:	b508      	push	{r3, lr}
        if (txFrameLength > 127) return DWT_ERROR ;
    }
    if (txFrameLength < 2) return DWT_ERROR ;
#endif

    if ((txBufferOffset + txFrameLength) > 1024)
 80007e6:	1813      	adds	r3, r2, r0
 80007e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007ec:	dc07      	bgt.n	80007fe <dwt_writetxdata+0x1a>
 80007ee:	460b      	mov	r3, r1
 80007f0:	4611      	mov	r1, r2
        return DWT_ERROR ;

    // write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
    dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes) ;
 80007f2:	1e82      	subs	r2, r0, #2
 80007f4:	2009      	movs	r0, #9
 80007f6:	f7ff ffd1 	bl	800079c <dwt_writetodevice>


    return DWT_SUCCESS ;
 80007fa:	2000      	movs	r0, #0
 80007fc:	bd08      	pop	{r3, pc}
    }
    if (txFrameLength < 2) return DWT_ERROR ;
#endif

    if ((txBufferOffset + txFrameLength) > 1024)
        return DWT_ERROR ;
 80007fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    // write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
    dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes) ;


    return DWT_SUCCESS ;
} // end dwt_writetxdata()
 8000802:	bd08      	pop	{r3, pc}

08000804 <dwt_readfromdevice>:
    uint16_t recordNumber,
    uint16_t index,
    uint32_t length,
    uint8_t  *buffer
)
{
 8000804:	b510      	push	{r4, lr}
 8000806:	b082      	sub	sp, #8
#ifdef DWT_API_ERROR_CHECK
    if (recordNumber > 0x3F) return DWT_ERROR ;                    // record number is limited to 6-bits.
#endif
    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)

    if (index == 0)                                         // for index of 0, no sub-index is required
 8000808:	b1b9      	cbz	r1, 800083a <dwt_readfromdevice+0x36>
        if (index > 0x7FFF) return DWT_ERROR ;                     // index is limited to 15-bits.
        if ((index + length)> 0x7FFF) return DWT_ERROR ;           // sub-addressible area is limited to 15-bits.
#endif
        header[cnt++] = (uint8_t)(0x40 | recordNumber) ;      // bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id

        if (index <= 127)                                   // for non-zero index < 127, just a single sub-index byte is required
 800080a:	297f      	cmp	r1, #127	; 0x7f
    {
#ifdef DWT_API_ERROR_CHECK
        if (index > 0x7FFF) return DWT_ERROR ;                     // index is limited to 15-bits.
        if ((index + length)> 0x7FFF) return DWT_ERROR ;           // sub-addressible area is limited to 15-bits.
#endif
        header[cnt++] = (uint8_t)(0x40 | recordNumber) ;      // bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800080c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8000810:	f88d 0004 	strb.w	r0, [sp, #4]
        {
            header[cnt++] = (uint8_t) index ;                 // bit-7 zero means no extension, bits 6-0 is index.
        }
        else
        {
            header[cnt++] = 0x80 | (uint8_t)(index) ;           // bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000814:	bf83      	ittte	hi
 8000816:	f061 007f 	ornhi	r0, r1, #127	; 0x7f
            header[cnt++] =  (uint8_t) (index >> 7) ;           // 8-bit value = high eight bits of index.
 800081a:	09c9      	lsrhi	r1, r1, #7
        {
            header[cnt++] = (uint8_t) index ;                 // bit-7 zero means no extension, bits 6-0 is index.
        }
        else
        {
            header[cnt++] = 0x80 | (uint8_t)(index) ;           // bit-7 one means extended index, bits 6-0 is low seven bits of index.
 800081c:	f88d 0005 	strbhi.w	r0, [sp, #5]
#endif
        header[cnt++] = (uint8_t)(0x40 | recordNumber) ;      // bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id

        if (index <= 127)                                   // for non-zero index < 127, just a single sub-index byte is required
        {
            header[cnt++] = (uint8_t) index ;                 // bit-7 zero means no extension, bits 6-0 is index.
 8000820:	f88d 1005 	strbls.w	r1, [sp, #5]
 8000824:	bf92      	itee	ls
 8000826:	2002      	movls	r0, #2
        }
        else
        {
            header[cnt++] = 0x80 | (uint8_t)(index) ;           // bit-7 one means extended index, bits 6-0 is low seven bits of index.
            header[cnt++] =  (uint8_t) (index >> 7) ;           // 8-bit value = high eight bits of index.
 8000828:	f88d 1006 	strbhi.w	r1, [sp, #6]
 800082c:	2003      	movhi	r0, #3
        }
    }

    // do the read from the SPI

    return readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 800082e:	4905      	ldr	r1, [pc, #20]	; (8000844 <dwt_readfromdevice+0x40>)
 8000830:	680c      	ldr	r4, [r1, #0]
 8000832:	a901      	add	r1, sp, #4
 8000834:	47a0      	blx	r4

} // end dwt_readfromdevice()
 8000836:	b002      	add	sp, #8
 8000838:	bd10      	pop	{r4, pc}
#endif
    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)

    if (index == 0)                                         // for index of 0, no sub-index is required
    {
        header[cnt++] = (uint8_t) recordNumber ;              // bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800083a:	f88d 0004 	strb.w	r0, [sp, #4]
 800083e:	2001      	movs	r0, #1
 8000840:	e7f5      	b.n	800082e <dwt_readfromdevice+0x2a>
 8000842:	bf00      	nop
 8000844:	20000098 	.word	0x20000098

08000848 <dwt_readrxtimestamp>:
 *
 * no return value
 */
#pragma GCC optimize ("O3")
void dwt_readrxtimestamp(uint8_t* timestamp)
{
 8000848:	4603      	mov	r3, r0
    dwt_readfromdevice(RX_TIME_ID, 0, RX_TIME_RX_STAMP_LEN, timestamp) ; //get the adjusted time of arrival
 800084a:	2100      	movs	r1, #0
 800084c:	2015      	movs	r0, #21
 800084e:	2205      	movs	r2, #5
 8000850:	f7ff bfd8 	b.w	8000804 <dwt_readfromdevice>

08000854 <dwt_read32bitoffsetreg>:
 *
 * returns 32 bit register value (success), or DWT_DECA_ERROR for error
 */
#pragma GCC optimize ("O3")
uint32_t dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 8000854:	b500      	push	{lr}
    uint32_t regval = DWT_ERROR ;
    int     j ;
    uint8_t  buffer[4] ;

    int result = dwt_readfromdevice(regFileID,regOffset,4,buffer); // read 4 bytes (32-bits) register into buffer
 8000856:	2204      	movs	r2, #4
 *
 * returns 32 bit register value (success), or DWT_DECA_ERROR for error
 */
#pragma GCC optimize ("O3")
uint32_t dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 8000858:	b083      	sub	sp, #12
    uint32_t regval = DWT_ERROR ;
    int     j ;
    uint8_t  buffer[4] ;

    int result = dwt_readfromdevice(regFileID,regOffset,4,buffer); // read 4 bytes (32-bits) register into buffer
 800085a:	b280      	uxth	r0, r0
 800085c:	b289      	uxth	r1, r1
 800085e:	eb0d 0302 	add.w	r3, sp, r2
 8000862:	f7ff ffcf 	bl	8000804 <dwt_readfromdevice>

    if(result == DWT_SUCCESS)
 8000866:	b120      	cbz	r0, 8000872 <dwt_read32bitoffsetreg+0x1e>
 * returns 32 bit register value (success), or DWT_DECA_ERROR for error
 */
#pragma GCC optimize ("O3")
uint32_t dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
    uint32_t regval = DWT_ERROR ;
 8000868:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
            regval = (regval << 8) + buffer[j] ;        // sum
        }
    }
    return regval ;

} // end dwt_read32bitoffsetreg()
 800086c:	b003      	add	sp, #12
 800086e:	f85d fb04 	ldr.w	pc, [sp], #4

    if(result == DWT_SUCCESS)
    {
        for (j = 3 ; j >= 0 ; j --)
        {
            regval = (regval << 8) + buffer[j] ;        // sum
 8000872:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000876:	f89d 1006 	ldrb.w	r1, [sp, #6]
 800087a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800087e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000882:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000886:	eb01 2000 	add.w	r0, r1, r0, lsl #8
 800088a:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 800088e:	eb03 2000 	add.w	r0, r3, r0, lsl #8
        }
    }
    return regval ;

} // end dwt_read32bitoffsetreg()
 8000892:	b003      	add	sp, #12
 8000894:	f85d fb04 	ldr.w	pc, [sp], #4

08000898 <dwt_readsystimestamphi32>:
 * returns high 32-bits of system time timestamp
 */
#pragma GCC optimize ("O3")
uint32_t dwt_readsystimestamphi32(void)
{
    return dwt_read32bitoffsetreg(SYS_TIME_ID, 1);
 8000898:	2006      	movs	r0, #6
 800089a:	2101      	movs	r1, #1
 800089c:	f7ff bfda 	b.w	8000854 <dwt_read32bitoffsetreg>

080008a0 <dwt_read16bitoffsetreg>:
 *
 * returns 16 bit register value (success), or DWT_DECA_ERROR for error
 */
#pragma GCC optimize ("O3")
uint16_t dwt_read16bitoffsetreg(int regFileID,int regOffset)
{
 80008a0:	b500      	push	{lr}
 80008a2:	b083      	sub	sp, #12
    uint16_t regval = DWT_ERROR ;
    uint8_t  buffer[2] ;

    int result = dwt_readfromdevice(regFileID,regOffset,2,buffer); // read 2 bytes (16-bits) register into buffer
 80008a4:	b280      	uxth	r0, r0
 80008a6:	b289      	uxth	r1, r1
 80008a8:	2202      	movs	r2, #2
 80008aa:	ab01      	add	r3, sp, #4
 80008ac:	f7ff ffaa 	bl	8000804 <dwt_readfromdevice>

    if(result == DWT_SUCCESS)
 80008b0:	b120      	cbz	r0, 80008bc <dwt_read16bitoffsetreg+0x1c>
 * returns 16 bit register value (success), or DWT_DECA_ERROR for error
 */
#pragma GCC optimize ("O3")
uint16_t dwt_read16bitoffsetreg(int regFileID,int regOffset)
{
    uint16_t regval = DWT_ERROR ;
 80008b2:	f64f 70ff 	movw	r0, #65535	; 0xffff
    {
        regval = (buffer[1] << 8) + buffer[0] ;        // sum
    }
    return regval ;

} // end dwt_read16bitoffsetreg()
 80008b6:	b003      	add	sp, #12
 80008b8:	f85d fb04 	ldr.w	pc, [sp], #4

    int result = dwt_readfromdevice(regFileID,regOffset,2,buffer); // read 2 bytes (16-bits) register into buffer

    if(result == DWT_SUCCESS)
    {
        regval = (buffer[1] << 8) + buffer[0] ;        // sum
 80008bc:	f89d 0005 	ldrb.w	r0, [sp, #5]
 80008c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80008c4:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80008c8:	b280      	uxth	r0, r0
    }
    return regval ;

} // end dwt_read16bitoffsetreg()
 80008ca:	b003      	add	sp, #12
 80008cc:	f85d fb04 	ldr.w	pc, [sp], #4

080008d0 <dwt_write32bitoffsetreg>:
 *
 * returns DWT_DECA_SUCCESS for success, or DWT_DECA_ERROR for error
 */
#pragma GCC optimize ("O3")
int dwt_write32bitoffsetreg(int regFileID,int regOffset,uint32_t regval)
{
 80008d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008d2:	4614      	mov	r4, r2
 80008d4:	b083      	sub	sp, #12
    uint8_t  buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
    {
        buffer[j] = regval & 0xff ;
        regval >>= 8 ;
 80008d6:	0a17      	lsrs	r7, r2, #8
 80008d8:	0c16      	lsrs	r6, r2, #16
 80008da:	0e15      	lsrs	r5, r2, #24
    }

    reg = dwt_writetodevice(regFileID,regOffset,4,buffer);
 80008dc:	2204      	movs	r2, #4
 80008de:	b289      	uxth	r1, r1
 80008e0:	eb0d 0302 	add.w	r3, sp, r2
 80008e4:	b280      	uxth	r0, r0
    int reg;
    uint8_t  buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
    {
        buffer[j] = regval & 0xff ;
 80008e6:	f88d 4004 	strb.w	r4, [sp, #4]
 80008ea:	f88d 7005 	strb.w	r7, [sp, #5]
 80008ee:	f88d 6006 	strb.w	r6, [sp, #6]
 80008f2:	f88d 5007 	strb.w	r5, [sp, #7]
        regval >>= 8 ;
    }

    reg = dwt_writetodevice(regFileID,regOffset,4,buffer);
 80008f6:	f7ff ff51 	bl	800079c <dwt_writetodevice>

    return reg;

} // end dwt_write32bitoffsetreg()
 80008fa:	b003      	add	sp, #12
 80008fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008fe:	bf00      	nop

08000900 <dwt_writetxfctrl>:
 * returns DWT_DECA_SUCCESS for success, or DWT_DECA_ERROR for error
 *
 */
#pragma GCC optimize ("O3")
int dwt_writetxfctrl(uint16_t txFrameLength, uint16_t txBufferOffset)
{
 8000900:	b508      	push	{r3, lr}
    if (txFrameLength < 2) return DWT_ERROR ;
#endif

    // write the frame length to the TX frame control register
    // dw1000local.txFCTRL has kept configured bit rate information
    uint32_t reg32 = dw1000local.txFCTRL | txFrameLength | (txBufferOffset << 22);
 8000902:	4b05      	ldr	r3, [pc, #20]	; (8000918 <dwt_writetxfctrl+0x18>)
 8000904:	691a      	ldr	r2, [r3, #16]
 8000906:	4310      	orrs	r0, r2
 8000908:	ea40 5281 	orr.w	r2, r0, r1, lsl #22
    dwt_write32bitoffsetreg(TX_FCTRL_ID,0,reg32) ;
 800090c:	2100      	movs	r1, #0
 800090e:	2008      	movs	r0, #8
 8000910:	f7ff ffde 	bl	80008d0 <dwt_write32bitoffsetreg>

    return DWT_SUCCESS ;

} // end dwt_writetxfctrl()
 8000914:	2000      	movs	r0, #0
 8000916:	bd08      	pop	{r3, pc}
 8000918:	20000000 	.word	0x20000000

0800091c <dwt_entersleepaftertx>:
 * output parameters
 *
 * no return value
 */
void dwt_entersleepaftertx(int enable)
{
 800091c:	b510      	push	{r4, lr}
    uint32_t reg = dwt_read32bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET);
 800091e:	2104      	movs	r1, #4
 * output parameters
 *
 * no return value
 */
void dwt_entersleepaftertx(int enable)
{
 8000920:	4604      	mov	r4, r0
    uint32_t reg = dwt_read32bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET);
 8000922:	2036      	movs	r0, #54	; 0x36
 8000924:	f7ff ff96 	bl	8000854 <dwt_read32bitoffsetreg>
    //set the auto TX -> sleep bit
    if(enable)
 8000928:	b93c      	cbnz	r4, 800093a <dwt_entersleepaftertx+0x1e>
        reg |= PMSC_CTRL1_ATXSLP;
    else
        reg &= ~(PMSC_CTRL1_ATXSLP);
 800092a:	f420 6200 	bic.w	r2, r0, #2048	; 0x800

    dwt_write32bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, reg);
 800092e:	2104      	movs	r1, #4
 8000930:	2036      	movs	r0, #54	; 0x36
}
 8000932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if(enable)
        reg |= PMSC_CTRL1_ATXSLP;
    else
        reg &= ~(PMSC_CTRL1_ATXSLP);

    dwt_write32bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, reg);
 8000936:	f7ff bfcb 	b.w	80008d0 <dwt_write32bitoffsetreg>
void dwt_entersleepaftertx(int enable)
{
    uint32_t reg = dwt_read32bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET);
    //set the auto TX -> sleep bit
    if(enable)
        reg |= PMSC_CTRL1_ATXSLP;
 800093a:	f440 6200 	orr.w	r2, r0, #2048	; 0x800
    else
        reg &= ~(PMSC_CTRL1_ATXSLP);

    dwt_write32bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, reg);
 800093e:	2104      	movs	r1, #4
 8000940:	2036      	movs	r0, #54	; 0x36
}
 8000942:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if(enable)
        reg |= PMSC_CTRL1_ATXSLP;
    else
        reg &= ~(PMSC_CTRL1_ATXSLP);

    dwt_write32bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, reg);
 8000946:	f7ff bfc3 	b.w	80008d0 <dwt_write32bitoffsetreg>
	...

0800094c <dwt_setdelayedtrxtime>:
 *
 * no return value
 */
#pragma GCC optimize ("O3")
void dwt_setdelayedtrxtime(uint32_t starttime)
{
 800094c:	4602      	mov	r2, r0
    dwt_write32bitoffsetreg(DX_TIME_ID, 1, starttime) ;
 800094e:	2101      	movs	r1, #1
 8000950:	200a      	movs	r0, #10
 8000952:	f7ff bfbd 	b.w	80008d0 <dwt_write32bitoffsetreg>
 8000956:	bf00      	nop

08000958 <dwt_starttx>:
 *
 * returns DWT_DECA_SUCCESS for success, or DWT_DECA_ERROR for error (e.g. a delayed transmission will fail if the delayed time has passed)
 */
#pragma GCC optimize ("O3")
int dwt_starttx(uint8_t mode)
{
 8000958:	b510      	push	{r4, lr}
    int retval = DWT_SUCCESS ;
    uint8_t temp  = 0x00;

    if(mode & DWT_RESPONSE_EXPECTED)
 800095a:	0783      	lsls	r3, r0, #30
    {
        temp = (uint8_t)SYS_CTRL_WAIT4RESP ; //set wait4response bit
        dw1000local.wait4resp = 1;
 800095c:	bf43      	ittte	mi
 800095e:	4b21      	ldrmi	r3, [pc, #132]	; (80009e4 <dwt_starttx+0x8c>)
 8000960:	2201      	movmi	r2, #1
 8000962:	f883 2069 	strbmi.w	r2, [r3, #105]	; 0x69
 */
#pragma GCC optimize ("O3")
int dwt_starttx(uint8_t mode)
{
    int retval = DWT_SUCCESS ;
    uint8_t temp  = 0x00;
 8000966:	2202      	movpl	r2, #2
 8000968:	bf52      	itee	pl
 800096a:	2306      	movpl	r3, #6

    if(mode & DWT_RESPONSE_EXPECTED)
    {
        temp = (uint8_t)SYS_CTRL_WAIT4RESP ; //set wait4response bit
        dw1000local.wait4resp = 1;
 800096c:	2282      	movmi	r2, #130	; 0x82
 800096e:	2386      	movmi	r3, #134	; 0x86
    }

    if (mode & DWT_START_TX_DELAYED)
 8000970:	f010 0401 	ands.w	r4, r0, #1
 *
 * returns DWT_DECA_SUCCESS for success, or DWT_DECA_ERROR for error (e.g. a delayed transmission will fail if the delayed time has passed)
 */
#pragma GCC optimize ("O3")
int dwt_starttx(uint8_t mode)
{
 8000974:	b082      	sub	sp, #8
    {
        temp = (uint8_t)SYS_CTRL_WAIT4RESP ; //set wait4response bit
        dw1000local.wait4resp = 1;
    }

    if (mode & DWT_START_TX_DELAYED)
 8000976:	d017      	beq.n	80009a8 <dwt_starttx+0x50>
    {
        //uint32_tstatus ;

        // both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8_t)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 8000978:	ac02      	add	r4, sp, #8
        dwt_writetodevice(SYS_CTRL_ID,0,1,&temp) ;
 800097a:	2100      	movs	r1, #0
    if (mode & DWT_START_TX_DELAYED)
    {
        //uint32_tstatus ;

        // both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8_t)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 800097c:	f804 3d01 	strb.w	r3, [r4, #-1]!
        dwt_writetodevice(SYS_CTRL_ID,0,1,&temp) ;
 8000980:	2201      	movs	r2, #1
 8000982:	4623      	mov	r3, r4
 8000984:	200d      	movs	r0, #13
 8000986:	f7ff ff09 	bl	800079c <dwt_writetodevice>
        dwt_readfromdevice(SYS_STATUS_ID,3,1,&temp) ;
 800098a:	4623      	mov	r3, r4
 800098c:	200f      	movs	r0, #15
 800098e:	2103      	movs	r1, #3
 8000990:	2201      	movs	r2, #1
 8000992:	f7ff ff37 	bl	8000804 <dwt_readfromdevice>
        //status = dwt_read32bitreg(SYS_STATUS_ID) ;          // read status register
        if ((temp & ((SYS_STATUS_HPDWARN >> 24) /*| SYS_STATUS_TXPRERR*/)) == 0)                               // Transmit Delayed Send set over Half a Period away.
 8000996:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800099a:	f003 0308 	and.w	r3, r3, #8
 800099e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80009a2:	b963      	cbnz	r3, 80009be <dwt_starttx+0x66>
        dwt_writetodevice(SYS_CTRL_ID,0,1,&temp) ;
    }

    return retval;

} // end dwt_starttx()
 80009a4:	b002      	add	sp, #8
 80009a6:	bd10      	pop	{r4, pc}

        }
    }
    else
    {
        temp |= (uint8_t)SYS_CTRL_TXSTRT ;
 80009a8:	ab02      	add	r3, sp, #8
        dwt_writetodevice(SYS_CTRL_ID,0,1,&temp) ;
 80009aa:	4621      	mov	r1, r4

        }
    }
    else
    {
        temp |= (uint8_t)SYS_CTRL_TXSTRT ;
 80009ac:	f803 2d01 	strb.w	r2, [r3, #-1]!
        dwt_writetodevice(SYS_CTRL_ID,0,1,&temp) ;
 80009b0:	200d      	movs	r0, #13
 80009b2:	2201      	movs	r2, #1
 80009b4:	f7ff fef2 	bl	800079c <dwt_writetodevice>
 * returns DWT_DECA_SUCCESS for success, or DWT_DECA_ERROR for error (e.g. a delayed transmission will fail if the delayed time has passed)
 */
#pragma GCC optimize ("O3")
int dwt_starttx(uint8_t mode)
{
    int retval = DWT_SUCCESS ;
 80009b8:	4620      	mov	r0, r4
        dwt_writetodevice(SYS_CTRL_ID,0,1,&temp) ;
    }

    return retval;

} // end dwt_starttx()
 80009ba:	b002      	add	sp, #8
 80009bc:	bd10      	pop	{r4, pc}
        else
        {
            // I am taking DSHP set to Indicate that the TXDLYS was set too late for the specified DX_TIME.
            // Remedial Action - (a) cancel delayed send
            temp = (uint8_t)SYS_CTRL_TRXOFF;                                  // this assumes the bit is in the lowest byte
            dwt_writetodevice(SYS_CTRL_ID,0,1,&temp) ;
 80009be:	4623      	mov	r3, r4
 80009c0:	2201      	movs	r2, #1
 80009c2:	2100      	movs	r1, #0
        }
        else
        {
            // I am taking DSHP set to Indicate that the TXDLYS was set too late for the specified DX_TIME.
            // Remedial Action - (a) cancel delayed send
            temp = (uint8_t)SYS_CTRL_TRXOFF;                                  // this assumes the bit is in the lowest byte
 80009c4:	2440      	movs	r4, #64	; 0x40
            dwt_writetodevice(SYS_CTRL_ID,0,1,&temp) ;
 80009c6:	200d      	movs	r0, #13
        }
        else
        {
            // I am taking DSHP set to Indicate that the TXDLYS was set too late for the specified DX_TIME.
            // Remedial Action - (a) cancel delayed send
            temp = (uint8_t)SYS_CTRL_TRXOFF;                                  // this assumes the bit is in the lowest byte
 80009c8:	f88d 4007 	strb.w	r4, [sp, #7]
            dwt_writetodevice(SYS_CTRL_ID,0,1,&temp) ;
 80009cc:	f7ff fee6 	bl	800079c <dwt_writetodevice>
            // note event Delayed TX Time too Late
            // could fall through to start a normal send (below) just sending late.....
            // ... instead return and assume return value of 1 will be used to detect and recover from the issue.

            // clear the "auto TX to sleep" bit
            dwt_entersleepaftertx(0);
 80009d0:	2000      	movs	r0, #0
 80009d2:	f7ff ffa3 	bl	800091c <dwt_entersleepaftertx>
            dw1000local.wait4resp = 0;
 80009d6:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <dwt_starttx+0x8c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            retval = DWT_ERROR ;                                            // Failed !
 80009de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009e2:	e7df      	b.n	80009a4 <dwt_starttx+0x4c>
 80009e4:	20000000 	.word	0x20000000

080009e8 <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 80009e8:	b500      	push	{lr}
 80009ea:	b083      	sub	sp, #12
    uint8_t buff ;
    //need to make sure that the host/IC buffer pointers are aligned before starting RX
    dwt_readfromdevice(SYS_STATUS_ID, 3, 1, &buff);
 80009ec:	2201      	movs	r2, #1
 80009ee:	f10d 0306 	add.w	r3, sp, #6
 80009f2:	200f      	movs	r0, #15
 80009f4:	2103      	movs	r1, #3
 80009f6:	f7ff ff05 	bl	8000804 <dwt_readfromdevice>

    if((buff & (SYS_STATUS_ICRBP>>24) ) !=              /* IC side Receive Buffer Pointer */
 80009fa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80009fe:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
            ((buff & (SYS_STATUS_HSRBP>>24) ) << 1) )   /* Host Side Receive Buffer Pointer */
 8000a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
{
    uint8_t buff ;
    //need to make sure that the host/IC buffer pointers are aligned before starting RX
    dwt_readfromdevice(SYS_STATUS_ID, 3, 1, &buff);

    if((buff & (SYS_STATUS_ICRBP>>24) ) !=              /* IC side Receive Buffer Pointer */
 8000a06:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8000a0a:	d007      	beq.n	8000a1c <dwt_syncrxbufptrs+0x34>
            ((buff & (SYS_STATUS_HSRBP>>24) ) << 1) )   /* Host Side Receive Buffer Pointer */
    {
        uint8_t hsrb = 0x01;
 8000a0c:	ab02      	add	r3, sp, #8
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f803 2d01 	strb.w	r2, [r3, #-1]!
        dwt_writetodevice(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 1, &hsrb) ;       // we need to swap rx buffer status reg (write one to toggle internally)
 8000a14:	200d      	movs	r0, #13
 8000a16:	2103      	movs	r1, #3
 8000a18:	f7ff fec0 	bl	800079c <dwt_writetodevice>
    }
}
 8000a1c:	b003      	add	sp, #12
 8000a1e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000a24 <dwt_forcetrxoff>:
//
// Force Transceiver OFF
//
#pragma GCC optimize ("O3")
void dwt_forcetrxoff(void)
{
 8000a24:	b530      	push	{r4, r5, lr}
 8000a26:	b083      	sub	sp, #12
	//decaIrqStatus_t stat ;
    uint8_t temp ;
	uint32_t mask;

    temp = (uint8_t)SYS_CTRL_TRXOFF ;                       // this assumes the bit is in the lowest byte
 8000a28:	ac02      	add	r4, sp, #8
 8000a2a:	2340      	movs	r3, #64	; 0x40
	
	mask = dwt_read32bitreg(SYS_MASK_ID) ;  //read set interrupt mask
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	200e      	movs	r0, #14
{
	//decaIrqStatus_t stat ;
    uint8_t temp ;
	uint32_t mask;

    temp = (uint8_t)SYS_CTRL_TRXOFF ;                       // this assumes the bit is in the lowest byte
 8000a30:	f804 3d01 	strb.w	r3, [r4, #-1]!
	
	mask = dwt_read32bitreg(SYS_MASK_ID) ;  //read set interrupt mask
 8000a34:	f7ff ff0e 	bl	8000854 <dwt_read32bitoffsetreg>
	// we can disable the radio, but before the status is cleared an interrupt can be set (e.g. the 
	// event has just happened before the radio was disabled)
	// thus we need to disable interrupt during this operation
    //stat = decamutexon() ; (PDM)

	dwt_write32bitreg(SYS_MASK_ID, 0) ; //clear interrupt mask - so we don't get any unwanted events
 8000a38:	2100      	movs	r1, #0
    uint8_t temp ;
	uint32_t mask;

    temp = (uint8_t)SYS_CTRL_TRXOFF ;                       // this assumes the bit is in the lowest byte
	
	mask = dwt_read32bitreg(SYS_MASK_ID) ;  //read set interrupt mask
 8000a3a:	4605      	mov	r5, r0
	// we can disable the radio, but before the status is cleared an interrupt can be set (e.g. the 
	// event has just happened before the radio was disabled)
	// thus we need to disable interrupt during this operation
    //stat = decamutexon() ; (PDM)

	dwt_write32bitreg(SYS_MASK_ID, 0) ; //clear interrupt mask - so we don't get any unwanted events
 8000a3c:	460a      	mov	r2, r1
 8000a3e:	200e      	movs	r0, #14
 8000a40:	f7ff ff46 	bl	80008d0 <dwt_write32bitoffsetreg>

    dwt_writetodevice(SYS_CTRL_ID,0,1,&temp) ; //disable the radio
 8000a44:	4623      	mov	r3, r4
 8000a46:	2100      	movs	r1, #0
 8000a48:	2201      	movs	r2, #1
 8000a4a:	200d      	movs	r0, #13
 8000a4c:	f7ff fea6 	bl	800079c <dwt_writetodevice>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID,(CLEAR_ALLTX_EVENTS | CLEAR_ALLRXERROR_EVENTS | CLEAR_ALLRXGOOD_EVENTS)) ;
 8000a50:	2100      	movs	r1, #0
 8000a52:	4a08      	ldr	r2, [pc, #32]	; (8000a74 <dwt_forcetrxoff+0x50>)
 8000a54:	200f      	movs	r0, #15
 8000a56:	f7ff ff3b 	bl	80008d0 <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
 8000a5a:	f7ff ffc5 	bl	80009e8 <dwt_syncrxbufptrs>

	dwt_write32bitreg(SYS_MASK_ID, mask) ; //set interrupt mask to what it was
 8000a5e:	462a      	mov	r2, r5
 8000a60:	2100      	movs	r1, #0
 8000a62:	200e      	movs	r0, #14
 8000a64:	f7ff ff34 	bl	80008d0 <dwt_write32bitoffsetreg>

	//enable/restore interrupts again... 
	//decamutexoff(stat) ; (PDM)
    dw1000local.wait4resp = 0;
 8000a68:	4b03      	ldr	r3, [pc, #12]	; (8000a78 <dwt_forcetrxoff+0x54>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

} // end deviceforcetrxoff()
 8000a70:	b003      	add	sp, #12
 8000a72:	bd30      	pop	{r4, r5, pc}
 8000a74:	2427fff8 	.word	0x2427fff8
 8000a78:	20000000 	.word	0x20000000

08000a7c <dwt_rxenable>:
 *
 * @return DWT_DECA_SUCCESS for success, or DWT_DECA_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed (if delayed time is > 8s from now))
 */
#pragma GCC optimize ("O3")
int dwt_rxenable(int delayed)
{
 8000a7c:	b530      	push	{r4, r5, lr}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	4604      	mov	r4, r0
    uint16_t temp ;
    uint8_t temp1 = 0;
 8000a82:	2500      	movs	r5, #0
 8000a84:	f88d 5003 	strb.w	r5, [sp, #3]
    dwt_syncrxbufptrs();
 8000a88:	f7ff ffae 	bl	80009e8 <dwt_syncrxbufptrs>

    temp = (uint16_t)SYS_CTRL_RXENAB ;

    if (delayed)
 8000a8c:	b1d4      	cbz	r4, 8000ac4 <dwt_rxenable+0x48>
{
    int reg;
    uint8_t  buffer[2] ;

    buffer[0] = regval & 0xFF;
    buffer[1] = regval >> 8 ;
 8000a8e:	2403      	movs	r4, #3

    reg = dwt_writetodevice(regFileID,regOffset,2,buffer);
 8000a90:	ab01      	add	r3, sp, #4
 8000a92:	4629      	mov	r1, r5
 8000a94:	2202      	movs	r2, #2
 8000a96:	200d      	movs	r0, #13
int dwt_write16bitoffsetreg(int regFileID,int regOffset,uint16_t regval)
{
    int reg;
    uint8_t  buffer[2] ;

    buffer[0] = regval & 0xFF;
 8000a98:	f88d 5004 	strb.w	r5, [sp, #4]
    buffer[1] = regval >> 8 ;
 8000a9c:	f88d 4005 	strb.w	r4, [sp, #5]

    reg = dwt_writetodevice(regFileID,regOffset,2,buffer);
 8000aa0:	f7ff fe7c 	bl	800079c <dwt_writetodevice>

    if (delayed) //check for errors
    {
        //uint32_tstatus1 = dwt_read32bitreg(SYS_STATUS_ID) ;          // read status register

    	dwt_readfromdevice(SYS_STATUS_ID,3,1,&temp1) ;
 8000aa4:	eb0d 0304 	add.w	r3, sp, r4
 8000aa8:	4621      	mov	r1, r4
 8000aaa:	200f      	movs	r0, #15
 8000aac:	2201      	movs	r2, #1
 8000aae:	f7ff fea9 	bl	8000804 <dwt_readfromdevice>

        if (temp1 & (SYS_STATUS_HPDWARN >> 24)) //if delay has not passed do delayed else immediate RX on
 8000ab2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8000ab6:	f003 0308 	and.w	r3, r3, #8
 8000aba:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8000abe:	b97b      	cbnz	r3, 8000ae0 <dwt_rxenable+0x64>
            return DWT_ERROR;
        }
    }

    return DWT_SUCCESS;
} // end dwt_rxenable()
 8000ac0:	b003      	add	sp, #12
 8000ac2:	bd30      	pop	{r4, r5, pc}
{
    int reg;
    uint8_t  buffer[2] ;

    buffer[0] = regval & 0xFF;
    buffer[1] = regval >> 8 ;
 8000ac4:	2501      	movs	r5, #1

    reg = dwt_writetodevice(regFileID,regOffset,2,buffer);
 8000ac6:	4621      	mov	r1, r4
 8000ac8:	2202      	movs	r2, #2
 8000aca:	ab01      	add	r3, sp, #4
 8000acc:	200d      	movs	r0, #13
int dwt_write16bitoffsetreg(int regFileID,int regOffset,uint16_t regval)
{
    int reg;
    uint8_t  buffer[2] ;

    buffer[0] = regval & 0xFF;
 8000ace:	f88d 4004 	strb.w	r4, [sp, #4]
    buffer[1] = regval >> 8 ;
 8000ad2:	f88d 5005 	strb.w	r5, [sp, #5]

    reg = dwt_writetodevice(regFileID,regOffset,2,buffer);
 8000ad6:	f7ff fe61 	bl	800079c <dwt_writetodevice>
            dwt_write16bitoffsetreg(SYS_CTRL_ID,0,temp) ;
            return DWT_ERROR;
        }
    }

    return DWT_SUCCESS;
 8000ada:	4620      	mov	r0, r4
} // end dwt_rxenable()
 8000adc:	b003      	add	sp, #12
 8000ade:	bd30      	pop	{r4, r5, pc}

    	dwt_readfromdevice(SYS_STATUS_ID,3,1,&temp1) ;

        if (temp1 & (SYS_STATUS_HPDWARN >> 24)) //if delay has not passed do delayed else immediate RX on
        {
            dwt_forcetrxoff(); //turn the delayed receive off, and do immediate receive, return warning indication
 8000ae0:	f7ff ffa0 	bl	8000a24 <dwt_forcetrxoff>
{
    int reg;
    uint8_t  buffer[2] ;

    buffer[0] = regval & 0xFF;
    buffer[1] = regval >> 8 ;
 8000ae4:	2401      	movs	r4, #1

    reg = dwt_writetodevice(regFileID,regOffset,2,buffer);
 8000ae6:	ab01      	add	r3, sp, #4
 8000ae8:	4629      	mov	r1, r5
 8000aea:	200d      	movs	r0, #13
 8000aec:	2202      	movs	r2, #2
int dwt_write16bitoffsetreg(int regFileID,int regOffset,uint16_t regval)
{
    int reg;
    uint8_t  buffer[2] ;

    buffer[0] = regval & 0xFF;
 8000aee:	f88d 5004 	strb.w	r5, [sp, #4]
    buffer[1] = regval >> 8 ;
 8000af2:	f88d 4005 	strb.w	r4, [sp, #5]

    reg = dwt_writetodevice(regFileID,regOffset,2,buffer);
 8000af6:	f7ff fe51 	bl	800079c <dwt_writetodevice>
        if (temp1 & (SYS_STATUS_HPDWARN >> 24)) //if delay has not passed do delayed else immediate RX on
        {
            dwt_forcetrxoff(); //turn the delayed receive off, and do immediate receive, return warning indication
            temp = (uint16_t)SYS_CTRL_RXENAB; //clear the delay bit
            dwt_write16bitoffsetreg(SYS_CTRL_ID,0,temp) ;
            return DWT_ERROR;
 8000afa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000afe:	e7df      	b.n	8000ac0 <dwt_rxenable+0x44>

08000b00 <dwt_rxreset>:
 * output parameters
 *
 * no return value
 */
void dwt_rxreset(void)
{
 8000b00:	b510      	push	{r4, lr}
 8000b02:	b082      	sub	sp, #8
	uint8_t resetrx = 0xe0;
 8000b04:	ac02      	add	r4, sp, #8
 8000b06:	23e0      	movs	r3, #224	; 0xe0
 8000b08:	f804 3d01 	strb.w	r3, [r4, #-1]!
	//set rx reset (writing 
	dwt_writetodevice(PMSC_ID, 0x3, 1, &resetrx);
 8000b0c:	2103      	movs	r1, #3
 8000b0e:	4623      	mov	r3, r4
 8000b10:	2201      	movs	r2, #1
 8000b12:	2036      	movs	r0, #54	; 0x36
 8000b14:	f7ff fe42 	bl	800079c <dwt_writetodevice>

	resetrx = 0xf0; //clear RX reset
	dwt_writetodevice(PMSC_ID, 0x3, 1, &resetrx);
 8000b18:	4623      	mov	r3, r4
 8000b1a:	2103      	movs	r1, #3
{
	uint8_t resetrx = 0xe0;
	//set rx reset (writing 
	dwt_writetodevice(PMSC_ID, 0x3, 1, &resetrx);

	resetrx = 0xf0; //clear RX reset
 8000b1c:	24f0      	movs	r4, #240	; 0xf0
	dwt_writetodevice(PMSC_ID, 0x3, 1, &resetrx);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2036      	movs	r0, #54	; 0x36
{
	uint8_t resetrx = 0xe0;
	//set rx reset (writing 
	dwt_writetodevice(PMSC_ID, 0x3, 1, &resetrx);

	resetrx = 0xf0; //clear RX reset
 8000b22:	f88d 4007 	strb.w	r4, [sp, #7]
	dwt_writetodevice(PMSC_ID, 0x3, 1, &resetrx);
 8000b26:	f7ff fe39 	bl	800079c <dwt_writetodevice>
}
 8000b2a:	b002      	add	sp, #8
 8000b2c:	bd10      	pop	{r4, pc}
	...

08000b30 <dw_debug>:
}


static void dw_debug(uint8_t eventType)
{
	user_config.cbDebug(eventType);
 8000b30:	4b01      	ldr	r3, [pc, #4]	; (8000b38 <dw_debug+0x8>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	4718      	bx	r3
 8000b36:	bf00      	nop
 8000b38:	20000130 	.word	0x20000130

08000b3c <dw_process_time>:
}

// check a rawtime for overflows
static void dw_process_time(uint64_t rawtime)
{
	if( rawtime < time_last )
 8000b3c:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <dw_process_time+0x20>)
	return timer_overflows*DWR_TIMER_MAX_40_BITS + rawtime;
}

// check a rawtime for overflows
static void dw_process_time(uint64_t rawtime)
{
 8000b3e:	b530      	push	{r4, r5, lr}
	if( rawtime < time_last )
 8000b40:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000b44:	42a9      	cmp	r1, r5
 8000b46:	bf08      	it	eq
 8000b48:	42a0      	cmpeq	r0, r4
		timer_overflows++;
 8000b4a:	bf3f      	itttt	cc
 8000b4c:	4c04      	ldrcc	r4, [pc, #16]	; (8000b60 <dw_process_time+0x24>)
 8000b4e:	6822      	ldrcc	r2, [r4, #0]
 8000b50:	3201      	addcc	r2, #1
 8000b52:	6022      	strcc	r2, [r4, #0]
	time_last = rawtime;
 8000b54:	e9c3 0100 	strd	r0, r1, [r3]
 8000b58:	bd30      	pop	{r4, r5, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000088 	.word	0x20000088
 8000b60:	20000080 	.word	0x20000080

08000b64 <dw_getRxQuality.isra.0>:
	dwt_setdelayedtrxtime(txtime);
	// schedule delayed transmission
	dwt_starttx(DWT_START_TX_DELAYED);
}

static void dw_getRxQuality(float *fppwr, float *cirp, float *fploss)
 8000b64:	b513      	push	{r0, r1, r4, lr}
	float fp1, fp2, fp3, N, C;

	// --- Formula in 4.7.1 of DW1000 Manual v2.05 ---

	// get FP amplitude #1
	dwt_readfromdevice(RX_TIME_ID, 7, 2, reg);
 8000b66:	2202      	movs	r2, #2
	dwt_setdelayedtrxtime(txtime);
	// schedule delayed transmission
	dwt_starttx(DWT_START_TX_DELAYED);
}

static void dw_getRxQuality(float *fppwr, float *cirp, float *fploss)
 8000b68:	4604      	mov	r4, r0
	float fp1, fp2, fp3, N, C;

	// --- Formula in 4.7.1 of DW1000 Manual v2.05 ---

	// get FP amplitude #1
	dwt_readfromdevice(RX_TIME_ID, 7, 2, reg);
 8000b6a:	ab01      	add	r3, sp, #4
 8000b6c:	2107      	movs	r1, #7
 8000b6e:	2015      	movs	r0, #21
 8000b70:	f7ff fe48 	bl	8000804 <dwt_readfromdevice>
	fp1 = reg[0] + (reg[1] << 8);

	// get FP amplitude #2 & #3
	dwt_readfromdevice(RX_FQUAL_ID, 2, 2, reg);
 8000b74:	2102      	movs	r1, #2
 8000b76:	460a      	mov	r2, r1
 8000b78:	ab01      	add	r3, sp, #4
 8000b7a:	2012      	movs	r0, #18
 8000b7c:	f7ff fe42 	bl	8000804 <dwt_readfromdevice>
	fp2 = reg[0] + (reg[1] << 8);
	dwt_readfromdevice(RX_FQUAL_ID, 4, 2, reg);
 8000b80:	2104      	movs	r1, #4
 8000b82:	eb0d 0301 	add.w	r3, sp, r1
 8000b86:	2202      	movs	r2, #2
 8000b88:	2012      	movs	r0, #18
 8000b8a:	f7ff fe3b 	bl	8000804 <dwt_readfromdevice>
	fp3 = reg[0] + (reg[1] << 8);

	// get accumulator count value
	N = (dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXPACC_MASK) >> RX_FINFO_RXPACC_SHIFT ;
 8000b8e:	2100      	movs	r1, #0
 8000b90:	2010      	movs	r0, #16
 8000b92:	f7ff fe5f 	bl	8000854 <dwt_read32bitoffsetreg>

	// calculate primary path power
	//*fppwr = 10*log10( (fp1*fp1 + fp2*fp2 + fp3*fp3)/(N*N)) - DWT_CONST_A_PRF64;

	// read CIR rx power
	dwt_readfromdevice(RX_FQUAL_ID, 6, 2, reg);
 8000b96:	ab01      	add	r3, sp, #4
 8000b98:	2106      	movs	r1, #6
 8000b9a:	2202      	movs	r2, #2
 8000b9c:	2012      	movs	r0, #18
 8000b9e:	f7ff fe31 	bl	8000804 <dwt_readfromdevice>
	C = reg[0] + (reg[1] << 8);
 8000ba2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000ba6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8000baa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8000bae:	ee07 3a90 	vmov	s15, r3
 8000bb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bb6:	edc4 7a00 	vstr	s15, [r4]
	*cirp = (float)C;

	// estimate path loss
	//*fploss = 10*log10( (fp1*fp1 + fp2*fp2 + fp3*fp3)/( C*POW_2_17 ) );
}
 8000bba:	b002      	add	sp, #8
 8000bbc:	bd10      	pop	{r4, pc}
	...

08000bc0 <dw_send_ieee_data_delayed.constprop.4>:
	bcast_addr[1] = 0xFF;
	dw_send_ieee_data_delayed(bcast_addr, msg, txtime);
}


static void dw_send_ieee_data_delayed(uint8_t* destAddr, DWR_MsgData_t *msg, uint32_t txtime)
 8000bc0:	b510      	push	{r4, lr}
	// [2-0]   Frame Type                   0,0,1 (Data)

	//	( [1] = 0x88, [0] = 0x41 )

	// data frame header (dest=short, source=short [DsSs])
	frameToSend.seqNum += 1;
 8000bc2:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <dw_send_ieee_data_delayed.constprop.4+0x50>)
 8000bc4:	789a      	ldrb	r2, [r3, #2]
 8000bc6:	3201      	adds	r2, #1
 8000bc8:	709a      	strb	r2, [r3, #2]
	frameToSend.destAddr[0] = destAddr[0];
 8000bca:	7802      	ldrb	r2, [r0, #0]
 8000bcc:	715a      	strb	r2, [r3, #5]
	frameToSend.destAddr[1] = destAddr[1];
 8000bce:	7842      	ldrb	r2, [r0, #1]
 8000bd0:	719a      	strb	r2, [r3, #6]

	// data custom payload
	memcpy(frameToSend.msgData, (uint8_t*)msg, PAYLOAD_DATA_LEN);
 8000bd2:	4a10      	ldr	r2, [pc, #64]	; (8000c14 <dw_send_ieee_data_delayed.constprop.4+0x54>)
	bcast_addr[1] = 0xFF;
	dw_send_ieee_data_delayed(bcast_addr, msg, txtime);
}


static void dw_send_ieee_data_delayed(uint8_t* destAddr, DWR_MsgData_t *msg, uint32_t txtime)
 8000bd4:	460c      	mov	r4, r1
	frameToSend.seqNum += 1;
	frameToSend.destAddr[0] = destAddr[0];
	frameToSend.destAddr[1] = destAddr[1];

	// data custom payload
	memcpy(frameToSend.msgData, (uint8_t*)msg, PAYLOAD_DATA_LEN);
 8000bd6:	3309      	adds	r3, #9
 8000bd8:	f102 0134 	add.w	r1, r2, #52	; 0x34
 8000bdc:	f852 0b04 	ldr.w	r0, [r2], #4
 8000be0:	f843 0b04 	str.w	r0, [r3], #4
 8000be4:	428a      	cmp	r2, r1
 8000be6:	d1f9      	bne.n	8000bdc <dw_send_ieee_data_delayed.constprop.4+0x1c>
 8000be8:	7812      	ldrb	r2, [r2, #0]
 8000bea:	701a      	strb	r2, [r3, #0]

	// write transmit binary data
	dwt_writetxdata(STANDARD_FRAME_SIZE, (uint8_t*)(&frameToSend), 0);
 8000bec:	4908      	ldr	r1, [pc, #32]	; (8000c10 <dw_send_ieee_data_delayed.constprop.4+0x50>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2040      	movs	r0, #64	; 0x40
 8000bf2:	f7ff fdf7 	bl	80007e4 <dwt_writetxdata>
	// frame length w/ 2-byte CRC, offset
	dwt_writetxfctrl(STANDARD_FRAME_SIZE, 0) ;
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	2040      	movs	r0, #64	; 0x40
 8000bfa:	f7ff fe81 	bl	8000900 <dwt_writetxfctrl>
	// set future tx time (accepts high 32 bits of 40 bit timer)
	dwt_setdelayedtrxtime(txtime);
 8000bfe:	4620      	mov	r0, r4
 8000c00:	f7ff fea4 	bl	800094c <dwt_setdelayedtrxtime>
	// schedule delayed transmission
	dwt_starttx(DWT_START_TX_DELAYED);
 8000c04:	2001      	movs	r0, #1
}
 8000c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// frame length w/ 2-byte CRC, offset
	dwt_writetxfctrl(STANDARD_FRAME_SIZE, 0) ;
	// set future tx time (accepts high 32 bits of 40 bit timer)
	dwt_setdelayedtrxtime(txtime);
	// schedule delayed transmission
	dwt_starttx(DWT_START_TX_DELAYED);
 8000c0a:	f7ff bea5 	b.w	8000958 <dwt_starttx>
 8000c0e:	bf00      	nop
 8000c10:	200000e5 	.word	0x200000e5
 8000c14:	200000b0 	.word	0x200000b0

08000c18 <decaranging_isr>:
	return dwt_readdevid();
}

// handle TX and RX good events, sending responses or notifying user where appropriate
void decaranging_isr()
{	
 8000c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If we're not initialized, don't do anything
	if( !dwr_initialized )
 8000c1c:	4b7e      	ldr	r3, [pc, #504]	; (8000e18 <decaranging_isr+0x200>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
	return dwt_readdevid();
}

// handle TX and RX good events, sending responses or notifying user where appropriate
void decaranging_isr()
{	
 8000c20:	b0a1      	sub	sp, #132	; 0x84
	// If we're not initialized, don't do anything
	if( !dwr_initialized )
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f000 8277 	beq.w	8001116 <decaranging_isr+0x4fe>
		return;

	// Let user know an IRQ was triggered
	dw_debug(DWR_EVENT_IRQ);
 8000c28:	2003      	movs	r0, #3
 8000c2a:	f7ff ff81 	bl	8000b30 <dw_debug>

	// Read the event status
	uint32_t status = dwt_read32bitreg(SYS_STATUS_ID);
 8000c2e:	2100      	movs	r1, #0
 8000c30:	200f      	movs	r0, #15
 8000c32:	f7ff fe0f 	bl	8000854 <dwt_read32bitoffsetreg>
	uint32_t bitsToClear = 0x00;

	if(status & SYS_STATUS_RXFCG) // Receiver FCS Good
 8000c36:	f410 4180 	ands.w	r1, r0, #16384	; 0x4000

	// Let user know an IRQ was triggered
	dw_debug(DWR_EVENT_IRQ);

	// Read the event status
	uint32_t status = dwt_read32bitreg(SYS_STATUS_ID);
 8000c3a:	4604      	mov	r4, r0
	uint32_t bitsToClear = 0x00;

	if(status & SYS_STATUS_RXFCG) // Receiver FCS Good
 8000c3c:	f000 8248 	beq.w	80010d0 <decaranging_isr+0x4b8>
	{
		// let the user know a good frame was received
		dw_debug( DWR_EVENT_RXGOOD );
 8000c40:	2001      	movs	r0, #1

		bitsToClear |= status & CLEAR_ALLRXGOOD_EVENTS;
 8000c42:	f404 46de 	and.w	r6, r4, #28416	; 0x6f00
	uint32_t bitsToClear = 0x00;

	if(status & SYS_STATUS_RXFCG) // Receiver FCS Good
	{
		// let the user know a good frame was received
		dw_debug( DWR_EVENT_RXGOOD );
 8000c46:	f7ff ff73 	bl	8000b30 <dw_debug>

		bitsToClear |= status & CLEAR_ALLRXGOOD_EVENTS;
		dwt_write32bitreg(SYS_STATUS_ID, bitsToClear);
 8000c4a:	200f      	movs	r0, #15
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4632      	mov	r2, r6
 8000c50:	f7ff fe3e 	bl	80008d0 <dwt_write32bitoffsetreg>

		// bug 634 - overrun overwrites the frame info data... so both frames should be discarded
		// read frame info and other registers and check for overflow again
		// if overflow set then discard both frames... 
		if (status & SYS_STATUS_RXOVRR) 
 8000c54:	f414 1580 	ands.w	r5, r4, #1048576	; 0x100000
 8000c58:	d008      	beq.n	8000c6c <decaranging_isr+0x54>
		{ 
			//when the overrun happens the frame info data of the buffer A (which contains the older frame e.g. seq. num = x) 
			//will be corrupted with the latest frame (seq. num = x + 2) data, both the host and IC are pointing to buffer A
			//we are going to discard this frame - turn off transceiver and reset receiver
			current_state = DWR_STATE_IDLE;
 8000c5a:	4b70      	ldr	r3, [pc, #448]	; (8000e1c <decaranging_isr+0x204>)
 8000c5c:	2400      	movs	r4, #0
 8000c5e:	701c      	strb	r4, [r3, #0]
			dwt_forcetrxoff();
 8000c60:	f7ff fee0 	bl	8000a24 <dwt_forcetrxoff>
			dwt_rxreset();
 8000c64:	f7ff ff4c 	bl	8000b00 <dwt_rxreset>
			dwt_rxenable(0);
 8000c68:	4620      	mov	r0, r4
 8000c6a:	e252      	b.n	8001112 <decaranging_isr+0x4fa>
		}
		else //no overrun condition - proceed to process the frame
		{
			// clear all receive status bits
			bitsToClear |= status & CLEAR_ALLRXGOOD_EVENTS;
			dwt_write32bitreg(SYS_STATUS_ID, bitsToClear);
 8000c6c:	4632      	mov	r2, r6
 8000c6e:	4629      	mov	r1, r5
 8000c70:	200f      	movs	r0, #15
 8000c72:	f7ff fe2d 	bl	80008d0 <dwt_write32bitoffsetreg>

			// length of received data
			uint16_t frameLen = dwt_read16bitoffsetreg(RX_FINFO_ID, 0) & 0x3FF;
 8000c76:	4629      	mov	r1, r5
 8000c78:	2010      	movs	r0, #16
 8000c7a:	f7ff fe11 	bl	80008a0 <dwt_read16bitoffsetreg>

			// read entire frame into buffer
			dwt_readfromdevice(RX_BUFFER_ID, 0, frameLen, rx_buffer);
 8000c7e:	4c68      	ldr	r4, [pc, #416]	; (8000e20 <decaranging_isr+0x208>)
 8000c80:	f3c0 0209 	ubfx	r2, r0, #0, #10
 8000c84:	4623      	mov	r3, r4
 8000c86:	2011      	movs	r0, #17
 8000c88:	4629      	mov	r1, r5
 8000c8a:	f7ff fdbb 	bl	8000804 <dwt_readfromdevice>

			// get frame type (bits 0-2 of frame)
			uint8_t frameType = rx_buffer[0] & 0x03;
 8000c8e:	7823      	ldrb	r3, [r4, #0]

			// ---------- HANDLE DATA FRAMES -------------
			if(frameType == FRAME_DATA)
 8000c90:	f003 0303 	and.w	r3, r3, #3
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	f040 8218 	bne.w	80010ca <decaranging_isr+0x4b2>
			{
				// read rx timestamp
				uint8_t rx_time_bytes[5];
				dwt_readrxtimestamp(rx_time_bytes);
 8000c9a:	a80c      	add	r0, sp, #48	; 0x30
 8000c9c:	f7ff fdd4 	bl	8000848 <dwt_readrxtimestamp>
				uint64_t rx_time = ((uint64_t)rx_time_bytes[4] << 32) + ((uint64_t)rx_time_bytes[3] << 24) + ((uint64_t)rx_time_bytes[2] << 16) + 
 8000ca0:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 8000ca4:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
								   ((uint64_t)rx_time_bytes[1] <<  8) + ((uint64_t)rx_time_bytes[0]);
 8000ca8:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
			if(frameType == FRAME_DATA)
			{
				// read rx timestamp
				uint8_t rx_time_bytes[5];
				dwt_readrxtimestamp(rx_time_bytes);
				uint64_t rx_time = ((uint64_t)rx_time_bytes[4] << 32) + ((uint64_t)rx_time_bytes[3] << 24) + ((uint64_t)rx_time_bytes[2] << 16) + 
 8000cac:	0602      	lsls	r2, r0, #24
 8000cae:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
 8000cb2:	1952      	adds	r2, r2, r5
 8000cb4:	f04f 0300 	mov.w	r3, #0
 8000cb8:	417b      	adcs	r3, r7
 8000cba:	18b6      	adds	r6, r6, r2
 8000cbc:	ea4f 4200 	mov.w	r2, r0, lsl #16
								   ((uint64_t)rx_time_bytes[1] <<  8) + ((uint64_t)rx_time_bytes[0]);
 8000cc0:	f89d 0031 	ldrb.w	r0, [sp, #49]	; 0x31
 8000cc4:	f04f 0700 	mov.w	r7, #0
 8000cc8:	415f      	adcs	r7, r3
 8000cca:	1992      	adds	r2, r2, r6
			if(frameType == FRAME_DATA)
			{
				// read rx timestamp
				uint8_t rx_time_bytes[5];
				dwt_readrxtimestamp(rx_time_bytes);
				uint64_t rx_time = ((uint64_t)rx_time_bytes[4] << 32) + ((uint64_t)rx_time_bytes[3] << 24) + ((uint64_t)rx_time_bytes[2] << 16) + 
 8000ccc:	f04f 0300 	mov.w	r3, #0
								   ((uint64_t)rx_time_bytes[1] <<  8) + ((uint64_t)rx_time_bytes[0]);
 8000cd0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000cd4:	417b      	adcs	r3, r7
			if(frameType == FRAME_DATA)
			{
				// read rx timestamp
				uint8_t rx_time_bytes[5];
				dwt_readrxtimestamp(rx_time_bytes);
				uint64_t rx_time = ((uint64_t)rx_time_bytes[4] << 32) + ((uint64_t)rx_time_bytes[3] << 24) + ((uint64_t)rx_time_bytes[2] << 16) + 
 8000cd6:	18b6      	adds	r6, r6, r2
								   ((uint64_t)rx_time_bytes[1] <<  8) + ((uint64_t)rx_time_bytes[0]);
 8000cd8:	f04f 0700 	mov.w	r7, #0
			if(frameType == FRAME_DATA)
			{
				// read rx timestamp
				uint8_t rx_time_bytes[5];
				dwt_readrxtimestamp(rx_time_bytes);
				uint64_t rx_time = ((uint64_t)rx_time_bytes[4] << 32) + ((uint64_t)rx_time_bytes[3] << 24) + ((uint64_t)rx_time_bytes[2] << 16) + 
 8000cdc:	415f      	adcs	r7, r3
								   ((uint64_t)rx_time_bytes[1] <<  8) + ((uint64_t)rx_time_bytes[0]);

				// process time for overflows
				dw_process_time( rx_time );
 8000cde:	4630      	mov	r0, r6
 8000ce0:	4639      	mov	r1, r7
 8000ce2:	f7ff ff2b 	bl	8000b3c <dw_process_time>
				ieee_frame_dsss_t *frame = (ieee_frame_dsss_t*)(rx_buffer);

				// extract payload
				DWR_MsgData_t *msg = (DWR_MsgData_t*)(frame->msgData);

				switch( msg->msgType )
 8000ce6:	7a63      	ldrb	r3, [r4, #9]
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	f200 81e9 	bhi.w	80010c2 <decaranging_isr+0x4aa>
 8000cf0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000cf4:	00540005 	.word	0x00540005
 8000cf8:	016800aa 	.word	0x016800aa
 8000cfc:	01b8      	.short	0x01b8
						// some node wants range information to nearby nodes. We should
						// respond if we have RSPTWR set. 

						// *Note: We'll start a range sequence from ANY state, so we don't depend on it having
						// returned to the INIT state. This helps recover from bad states.
						if( user_config.nodeOpts & DWR_OPT_RSPTWR )
 8000cfe:	4b49      	ldr	r3, [pc, #292]	; (8000e24 <decaranging_isr+0x20c>)
 8000d00:	791b      	ldrb	r3, [r3, #4]
 8000d02:	071d      	lsls	r5, r3, #28
 8000d04:	f140 8207 	bpl.w	8001116 <decaranging_isr+0x4fe>
						{
							// update range state variable and times
							current_state = DWR_STATE_RANGE_INIT;
 8000d08:	4d44      	ldr	r5, [pc, #272]	; (8000e1c <decaranging_isr+0x204>)
}

// project an input (raw) time into local frame, accounting for timer_overflows
static uint64_t dw_project_time(uint64_t rawtime)
{
	return timer_overflows*DWR_TIMER_MAX_40_BITS + rawtime;
 8000d0a:	f8df a130 	ldr.w	sl, [pc, #304]	; 8000e3c <decaranging_isr+0x224>
						// *Note: We'll start a range sequence from ANY state, so we don't depend on it having
						// returned to the INIT state. This helps recover from bad states.
						if( user_config.nodeOpts & DWR_OPT_RSPTWR )
						{
							// update range state variable and times
							current_state = DWR_STATE_RANGE_INIT;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	702b      	strb	r3, [r5, #0]
}

// project an input (raw) time into local frame, accounting for timer_overflows
static uint64_t dw_project_time(uint64_t rawtime)
{
	return timer_overflows*DWR_TIMER_MAX_40_BITS + rawtime;
 8000d12:	f8da 3000 	ldr.w	r3, [sl]
 8000d16:	f04f 0800 	mov.w	r8, #0
 8000d1a:	eb16 0008 	adds.w	r0, r6, r8
 8000d1e:	ea4f 2903 	mov.w	r9, r3, lsl #8
							// update range state variable and times
							current_state = DWR_STATE_RANGE_INIT;
							// update new range sequence id
							//current_rangeSeq = msg->rangeSeq;
							// update rx time of the init message
							time_rx_init = dw_project_time( rx_time );
 8000d22:	4b41      	ldr	r3, [pc, #260]	; (8000e28 <decaranging_isr+0x210>)
}

// project an input (raw) time into local frame, accounting for timer_overflows
static uint64_t dw_project_time(uint64_t rawtime)
{
	return timer_overflows*DWR_TIMER_MAX_40_BITS + rawtime;
 8000d24:	eb47 0109 	adc.w	r1, r7, r9
							// update range state variable and times
							current_state = DWR_STATE_RANGE_INIT;
							// update new range sequence id
							//current_rangeSeq = msg->rangeSeq;
							// update rx time of the init message
							time_rx_init = dw_project_time( rx_time );
 8000d28:	e9c3 0100 	strd	r0, r1, [r3]
							// extract tx time of the init message
							time_tx_init = msg->t_tx;
 8000d2c:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 8000e20 <decaranging_isr+0x208>
 8000d30:	4b3e      	ldr	r3, [pc, #248]	; (8000e2c <decaranging_isr+0x214>)
 8000d32:	f8d9 2011 	ldr.w	r2, [r9, #17]
 8000d36:	f8d9 100d 	ldr.w	r1, [r9, #13]
							// schedule a delayed response with random dithering
							uint32_t tx_time_min = (uint32_t)(rx_time>>8) + ( DWR_REPLY_DELAY_US )*1e3/DWR_TIMER_UNITS_HI_NS;
 8000d3a:	0a30      	lsrs	r0, r6, #8
							// update new range sequence id
							//current_rangeSeq = msg->rangeSeq;
							// update rx time of the init message
							time_rx_init = dw_project_time( rx_time );
							// extract tx time of the init message
							time_tx_init = msg->t_tx;
 8000d3c:	e883 0006 	stmia.w	r3, {r1, r2}
							// schedule a delayed response with random dithering
							uint32_t tx_time_min = (uint32_t)(rx_time>>8) + ( DWR_REPLY_DELAY_US )*1e3/DWR_TIMER_UNITS_HI_NS;
 8000d40:	ea40 6007 	orr.w	r0, r0, r7, lsl #24
 8000d44:	f7ff fb62 	bl	800040c <__aeabi_ui2d>
 8000d48:	a331      	add	r3, pc, #196	; (adr r3, 8000e10 <decaranging_isr+0x1f8>)
 8000d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d4e:	f7ff fa21 	bl	8000194 <__adddf3>
 8000d52:	f7ff fbd1 	bl	80004f8 <__aeabi_d2uiz>
							// add slot delay and mask top 31 bits
							uint32_t tx_time = (tx_time_min + time_slotdelay) & DWR_TIMER_HI_31_BITS;
 8000d56:	4b36      	ldr	r3, [pc, #216]	; (8000e30 <decaranging_isr+0x218>)
							// schedule the (delayed) response - takes high 32 bits of 40 bit timer
							dw_send_range_resp(frame->sourceAddr, msg->rangeSeq, tx_time);
 8000d58:	f899 200a 	ldrb.w	r2, [r9, #10]
							// extract tx time of the init message
							time_tx_init = msg->t_tx;
							// schedule a delayed response with random dithering
							uint32_t tx_time_min = (uint32_t)(rx_time>>8) + ( DWR_REPLY_DELAY_US )*1e3/DWR_TIMER_UNITS_HI_NS;
							// add slot delay and mask top 31 bits
							uint32_t tx_time = (tx_time_min + time_slotdelay) & DWR_TIMER_HI_31_BITS;
 8000d5c:	681c      	ldr	r4, [r3, #0]
}

static void dw_send_range_resp(uint8_t* destAddr, uint16_t seqNum, uint32_t txtime)
{
	// create range response message
	msgToSend.msgType  = DWR_MSG_RANGE_RESP;
 8000d5e:	4b35      	ldr	r3, [pc, #212]	; (8000e34 <decaranging_isr+0x21c>)
							// extract tx time of the init message
							time_tx_init = msg->t_tx;
							// schedule a delayed response with random dithering
							uint32_t tx_time_min = (uint32_t)(rx_time>>8) + ( DWR_REPLY_DELAY_US )*1e3/DWR_TIMER_UNITS_HI_NS;
							// add slot delay and mask top 31 bits
							uint32_t tx_time = (tx_time_min + time_slotdelay) & DWR_TIMER_HI_31_BITS;
 8000d60:	4420      	add	r0, r4
 8000d62:	f020 0401 	bic.w	r4, r0, #1
	// create range response message
	msgToSend.msgType  = DWR_MSG_RANGE_RESP;
	msgToSend.rangeSeq = seqNum;

	// send delayed data frame
	dw_send_ieee_data_delayed(destAddr, &msgToSend, txtime);
 8000d66:	4621      	mov	r1, r4
}

static void dw_send_range_resp(uint8_t* destAddr, uint16_t seqNum, uint32_t txtime)
{
	// create range response message
	msgToSend.msgType  = DWR_MSG_RANGE_RESP;
 8000d68:	2602      	movs	r6, #2
	msgToSend.rangeSeq = seqNum;

	// send delayed data frame
	dw_send_ieee_data_delayed(destAddr, &msgToSend, txtime);
 8000d6a:	f109 0007 	add.w	r0, r9, #7

static void dw_send_range_resp(uint8_t* destAddr, uint16_t seqNum, uint32_t txtime)
{
	// create range response message
	msgToSend.msgType  = DWR_MSG_RANGE_RESP;
	msgToSend.rangeSeq = seqNum;
 8000d6e:	705a      	strb	r2, [r3, #1]
}

static void dw_send_range_resp(uint8_t* destAddr, uint16_t seqNum, uint32_t txtime)
{
	// create range response message
	msgToSend.msgType  = DWR_MSG_RANGE_RESP;
 8000d70:	701e      	strb	r6, [r3, #0]
	msgToSend.rangeSeq = seqNum;

	// send delayed data frame
	dw_send_ieee_data_delayed(destAddr, &msgToSend, txtime);
 8000d72:	f7ff ff25 	bl	8000bc0 <dw_send_ieee_data_delayed.constprop.4>
	// listen immediately afterwards
	dwt_rxenable(0);
 8000d76:	4640      	mov	r0, r8
 8000d78:	f7ff fe80 	bl	8000a7c <dwt_rxenable>
}

// project an input (raw) time into local frame, accounting for timer_overflows
static uint64_t dw_project_time(uint64_t rawtime)
{
	return timer_overflows*DWR_TIMER_MAX_40_BITS + rawtime;
 8000d7c:	f8da 7000 	ldr.w	r7, [sl]
							// schedule the (delayed) response - takes high 32 bits of 40 bit timer
							dw_send_range_resp(frame->sourceAddr, msg->rangeSeq, tx_time);
							// update the tx time of the response message (expand hi 32 bits to 40 bit timer)
							time_tx_resp = dw_project_time( ((uint64_t)tx_time)<<8 );
							// update new range state
							current_state = DWR_STATE_RANGE_RESP;
 8000d80:	702e      	strb	r6, [r5, #0]
							// add slot delay and mask top 31 bits
							uint32_t tx_time = (tx_time_min + time_slotdelay) & DWR_TIMER_HI_31_BITS;
							// schedule the (delayed) response - takes high 32 bits of 40 bit timer
							dw_send_range_resp(frame->sourceAddr, msg->rangeSeq, tx_time);
							// update the tx time of the response message (expand hi 32 bits to 40 bit timer)
							time_tx_resp = dw_project_time( ((uint64_t)tx_time)<<8 );
 8000d82:	0220      	lsls	r0, r4, #8
}

// project an input (raw) time into local frame, accounting for timer_overflows
static uint64_t dw_project_time(uint64_t rawtime)
{
	return timer_overflows*DWR_TIMER_MAX_40_BITS + rawtime;
 8000d84:	eb18 0200 	adds.w	r2, r8, r0
							// add slot delay and mask top 31 bits
							uint32_t tx_time = (tx_time_min + time_slotdelay) & DWR_TIMER_HI_31_BITS;
							// schedule the (delayed) response - takes high 32 bits of 40 bit timer
							dw_send_range_resp(frame->sourceAddr, msg->rangeSeq, tx_time);
							// update the tx time of the response message (expand hi 32 bits to 40 bit timer)
							time_tx_resp = dw_project_time( ((uint64_t)tx_time)<<8 );
 8000d88:	ea4f 6114 	mov.w	r1, r4, lsr #24
}

// project an input (raw) time into local frame, accounting for timer_overflows
static uint64_t dw_project_time(uint64_t rawtime)
{
	return timer_overflows*DWR_TIMER_MAX_40_BITS + rawtime;
 8000d8c:	ea4f 2307 	mov.w	r3, r7, lsl #8
 8000d90:	414b      	adcs	r3, r1
							// add slot delay and mask top 31 bits
							uint32_t tx_time = (tx_time_min + time_slotdelay) & DWR_TIMER_HI_31_BITS;
							// schedule the (delayed) response - takes high 32 bits of 40 bit timer
							dw_send_range_resp(frame->sourceAddr, msg->rangeSeq, tx_time);
							// update the tx time of the response message (expand hi 32 bits to 40 bit timer)
							time_tx_resp = dw_project_time( ((uint64_t)tx_time)<<8 );
 8000d92:	4929      	ldr	r1, [pc, #164]	; (8000e38 <decaranging_isr+0x220>)
							// update new range state
							current_state = DWR_STATE_RANGE_RESP;
							// send debug command
							dw_debug(DWR_EVENT_RXINIT);
 8000d94:	2004      	movs	r0, #4
							// add slot delay and mask top 31 bits
							uint32_t tx_time = (tx_time_min + time_slotdelay) & DWR_TIMER_HI_31_BITS;
							// schedule the (delayed) response - takes high 32 bits of 40 bit timer
							dw_send_range_resp(frame->sourceAddr, msg->rangeSeq, tx_time);
							// update the tx time of the response message (expand hi 32 bits to 40 bit timer)
							time_tx_resp = dw_project_time( ((uint64_t)tx_time)<<8 );
 8000d96:	e9c1 2300 	strd	r2, r3, [r1]
 8000d9a:	e1a2      	b.n	80010e2 <decaranging_isr+0x4ca>
}

// project an input (raw) time into local frame, accounting for timer_overflows
static uint64_t dw_project_time(uint64_t rawtime)
{
	return timer_overflows*DWR_TIMER_MAX_40_BITS + rawtime;
 8000d9c:	4d27      	ldr	r5, [pc, #156]	; (8000e3c <decaranging_isr+0x224>)
 8000d9e:	682b      	ldr	r3, [r5, #0]
 8000da0:	f04f 0800 	mov.w	r8, #0
 8000da4:	eb16 0a08 	adds.w	sl, r6, r8
 8000da8:	ea4f 2903 	mov.w	r9, r3, lsl #8
							break;
						}
						*/
						// Otherwise, the range sequence is correct and the state transition was correct.
						// Store the time we received this message
						time_rx_resp = dw_project_time( rx_time );
 8000dac:	4b24      	ldr	r3, [pc, #144]	; (8000e40 <decaranging_isr+0x228>)
}

// project an input (raw) time into local frame, accounting for timer_overflows
static uint64_t dw_project_time(uint64_t rawtime)
{
	return timer_overflows*DWR_TIMER_MAX_40_BITS + rawtime;
 8000dae:	eb47 0b09 	adc.w	fp, r7, r9
						*/
						// Otherwise, the range sequence is correct and the state transition was correct.
						// Store the time we received this message
						time_rx_resp = dw_project_time( rx_time );
						// no dithering required here for response time. Do it as fast as possible
						uint32_t tx_time = (uint32_t)(rx_time>>8) + ( DWR_REPLY_DELAY_US )*1e3/DWR_TIMER_UNITS_HI_NS;
 8000db2:	0a30      	lsrs	r0, r6, #8
							break;
						}
						*/
						// Otherwise, the range sequence is correct and the state transition was correct.
						// Store the time we received this message
						time_rx_resp = dw_project_time( rx_time );
 8000db4:	e9c3 ab00 	strd	sl, fp, [r3]
						// no dithering required here for response time. Do it as fast as possible
						uint32_t tx_time = (uint32_t)(rx_time>>8) + ( DWR_REPLY_DELAY_US )*1e3/DWR_TIMER_UNITS_HI_NS;
 8000db8:	ea40 6007 	orr.w	r0, r0, r7, lsl #24
 8000dbc:	f7ff fb26 	bl	800040c <__aeabi_ui2d>
 8000dc0:	a313      	add	r3, pc, #76	; (adr r3, 8000e10 <decaranging_isr+0x1f8>)
 8000dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc6:	f7ff f9e5 	bl	8000194 <__adddf3>
 8000dca:	f7ff fb95 	bl	80004f8 <__aeabi_d2uiz>
}

static void dw_send_range_fin(uint8_t* destAddr, uint16_t seqNum, uint64_t rxtime, uint32_t txtime)
{
	// create range response message
	msgToSend.msgType  = DWR_MSG_RANGE_FINAL;
 8000dce:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <decaranging_isr+0x21c>)
}

// project an input (raw) time into local frame, accounting for timer_overflows
static uint64_t dw_project_time(uint64_t rawtime)
{
	return timer_overflows*DWR_TIMER_MAX_40_BITS + rawtime;
 8000dd0:	682e      	ldr	r6, [r5, #0]
						time_rx_resp = dw_project_time( rx_time );
						// no dithering required here for response time. Do it as fast as possible
						uint32_t tx_time = (uint32_t)(rx_time>>8) + ( DWR_REPLY_DELAY_US )*1e3/DWR_TIMER_UNITS_HI_NS;
						tx_time &= DWR_TIMER_HI_31_BITS;
						// schedule the (delayed) response - takes high 32 bits of 40 bit timer
						dw_send_range_fin(frame->sourceAddr, msg->rangeSeq, time_rx_resp, tx_time);
 8000dd2:	7aa1      	ldrb	r1, [r4, #10]

static void dw_send_range_fin(uint8_t* destAddr, uint16_t seqNum, uint64_t rxtime, uint32_t txtime)
{
	// create range response message
	msgToSend.msgType  = DWR_MSG_RANGE_FINAL;
	msgToSend.rangeSeq = seqNum;
 8000dd4:	7059      	strb	r1, [r3, #1]
						// Otherwise, the range sequence is correct and the state transition was correct.
						// Store the time we received this message
						time_rx_resp = dw_project_time( rx_time );
						// no dithering required here for response time. Do it as fast as possible
						uint32_t tx_time = (uint32_t)(rx_time>>8) + ( DWR_REPLY_DELAY_US )*1e3/DWR_TIMER_UNITS_HI_NS;
						tx_time &= DWR_TIMER_HI_31_BITS;
 8000dd6:	f020 0201 	bic.w	r2, r0, #1
static void dw_send_range_fin(uint8_t* destAddr, uint16_t seqNum, uint64_t rxtime, uint32_t txtime)
{
	// create range response message
	msgToSend.msgType  = DWR_MSG_RANGE_FINAL;
	msgToSend.rangeSeq = seqNum;
	msgToSend.t_tx = dw_project_time( ((uint64_t)txtime)<<8 );
 8000dda:	0214      	lsls	r4, r2, #8
}

static void dw_send_range_fin(uint8_t* destAddr, uint16_t seqNum, uint64_t rxtime, uint32_t txtime)
{
	// create range response message
	msgToSend.msgType  = DWR_MSG_RANGE_FINAL;
 8000ddc:	2003      	movs	r0, #3
 8000dde:	7018      	strb	r0, [r3, #0]
	msgToSend.rangeSeq = seqNum;
	msgToSend.t_tx = dw_project_time( ((uint64_t)txtime)<<8 );
 8000de0:	0e15      	lsrs	r5, r2, #24
}

// project an input (raw) time into local frame, accounting for timer_overflows
static uint64_t dw_project_time(uint64_t rawtime)
{
	return timer_overflows*DWR_TIMER_MAX_40_BITS + rawtime;
 8000de2:	eb18 0004 	adds.w	r0, r8, r4
 8000de6:	ea4f 2106 	mov.w	r1, r6, lsl #8
 8000dea:	4169      	adcs	r1, r5
static void dw_send_range_fin(uint8_t* destAddr, uint16_t seqNum, uint64_t rxtime, uint32_t txtime)
{
	// create range response message
	msgToSend.msgType  = DWR_MSG_RANGE_FINAL;
	msgToSend.rangeSeq = seqNum;
	msgToSend.t_tx = dw_project_time( ((uint64_t)txtime)<<8 );
 8000dec:	6058      	str	r0, [r3, #4]
 8000dee:	6099      	str	r1, [r3, #8]
	msgToSend.t_rx = rxtime;
	
	// send delayed data frame
	dw_send_ieee_data_delayed(destAddr, &msgToSend, txtime);
 8000df0:	4814      	ldr	r0, [pc, #80]	; (8000e44 <decaranging_isr+0x22c>)
{
	// create range response message
	msgToSend.msgType  = DWR_MSG_RANGE_FINAL;
	msgToSend.rangeSeq = seqNum;
	msgToSend.t_tx = dw_project_time( ((uint64_t)txtime)<<8 );
	msgToSend.t_rx = rxtime;
 8000df2:	f8c3 a00c 	str.w	sl, [r3, #12]
	
	// send delayed data frame
	dw_send_ieee_data_delayed(destAddr, &msgToSend, txtime);
 8000df6:	4611      	mov	r1, r2
{
	// create range response message
	msgToSend.msgType  = DWR_MSG_RANGE_FINAL;
	msgToSend.rangeSeq = seqNum;
	msgToSend.t_tx = dw_project_time( ((uint64_t)txtime)<<8 );
	msgToSend.t_rx = rxtime;
 8000df8:	f8c3 b010 	str.w	fp, [r3, #16]
	
	// send delayed data frame
	dw_send_ieee_data_delayed(destAddr, &msgToSend, txtime);
 8000dfc:	f7ff fee0 	bl	8000bc0 <dw_send_ieee_data_delayed.constprop.4>
	// only listen after the range_fin if we're told to always listen
	if( user_config.nodeOpts & DWR_OPT_RXALL )
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <decaranging_isr+0x20c>)
 8000e02:	791b      	ldrb	r3, [r3, #4]
 8000e04:	079c      	lsls	r4, r3, #30
 8000e06:	f140 8186 	bpl.w	8001116 <decaranging_isr+0x4fe>
 8000e0a:	e129      	b.n	8001060 <decaranging_isr+0x448>
 8000e0c:	f3af 8000 	nop.w
 8000e10:	00000000 	.word	0x00000000
 8000e14:	40fe8480 	.word	0x40fe8480
 8000e18:	20000084 	.word	0x20000084
 8000e1c:	2000007c 	.word	0x2000007c
 8000e20:	20000154 	.word	0x20000154
 8000e24:	20000130 	.word	0x20000130
 8000e28:	200001b8 	.word	0x200001b8
 8000e2c:	200000a8 	.word	0x200000a8
 8000e30:	200000a0 	.word	0x200000a0
 8000e34:	200000b0 	.word	0x200000b0
 8000e38:	200001b0 	.word	0x200001b0
 8000e3c:	20000080 	.word	0x20000080
 8000e40:	20000128 	.word	0x20000128
 8000e44:	2000015b 	.word	0x2000015b
}

// project an input (raw) time into local frame, accounting for timer_overflows
static uint64_t dw_project_time(uint64_t rawtime)
{
	return timer_overflows*DWR_TIMER_MAX_40_BITS + rawtime;
 8000e48:	4bb7      	ldr	r3, [pc, #732]	; (8001128 <decaranging_isr+0x510>)
							break;
						}
						*/

						// Otherwise, extract the final timing information and calculate range.
						time_rx_fin  = dw_project_time( rx_time );;
 8000e4a:	f8df b2fc 	ldr.w	fp, [pc, #764]	; 8001148 <decaranging_isr+0x530>
}

// project an input (raw) time into local frame, accounting for timer_overflows
static uint64_t dw_project_time(uint64_t rawtime)
{
	return timer_overflows*DWR_TIMER_MAX_40_BITS + rawtime;
 8000e4e:	681b      	ldr	r3, [r3, #0]
						*/

						float fppwr, cirp, fploss;
						dw_getRxQuality(&fppwr, &cirp, &fploss);

						DWR_TwrTiming_t timing_info = 
 8000e50:	f8df a2f8 	ldr.w	sl, [pc, #760]	; 800114c <decaranging_isr+0x534>
 8000e54:	f8df 92f8 	ldr.w	r9, [pc, #760]	; 8001150 <decaranging_isr+0x538>
 8000e58:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 8001154 <decaranging_isr+0x53c>
						{
							.seq = msg->rangeSeq,
							.srcAddr = frame->sourceAddr[0] + (frame->sourceAddr[1] << 8),
							.dstAddr = user_config.addr,
 8000e5c:	4db3      	ldr	r5, [pc, #716]	; (800112c <decaranging_isr+0x514>)
}

// project an input (raw) time into local frame, accounting for timer_overflows
static uint64_t dw_project_time(uint64_t rawtime)
{
	return timer_overflows*DWR_TIMER_MAX_40_BITS + rawtime;
 8000e5e:	021b      	lsls	r3, r3, #8
 8000e60:	9301      	str	r3, [sp, #4]
 8000e62:	2300      	movs	r3, #0
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8000e6a:	1992      	adds	r2, r2, r6
 8000e6c:	417b      	adcs	r3, r7
 8000e6e:	4616      	mov	r6, r2
 8000e70:	461f      	mov	r7, r3
							break;
						}
						*/

						// Otherwise, extract the final timing information and calculate range.
						time_rx_fin  = dw_project_time( rx_time );;
 8000e72:	e9cb 6700 	strd	r6, r7, [fp]
						time_tx_fin  = msg->t_tx;
 8000e76:	4eae      	ldr	r6, [pc, #696]	; (8001130 <decaranging_isr+0x518>)
 8000e78:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8000e7c:	f8d4 3011 	ldr.w	r3, [r4, #17]
						time_rx_resp = msg->t_rx;
 8000e80:	4fac      	ldr	r7, [pc, #688]	; (8001134 <decaranging_isr+0x51c>)
						}
						*/

						// Otherwise, extract the final timing information and calculate range.
						time_rx_fin  = dw_project_time( rx_time );;
						time_tx_fin  = msg->t_tx;
 8000e82:	e886 000a 	stmia.w	r6, {r1, r3}
						time_rx_resp = msg->t_rx;
 8000e86:	f8d4 1015 	ldr.w	r1, [r4, #21]
 8000e8a:	f8d4 3019 	ldr.w	r3, [r4, #25]
							.rangeEst = ( ToF_us*SPEED_OF_LIGHT_CM_PER_US )
						};
						*/

						float fppwr, cirp, fploss;
						dw_getRxQuality(&fppwr, &cirp, &fploss);
 8000e8e:	a80b      	add	r0, sp, #44	; 0x2c
						*/

						// Otherwise, extract the final timing information and calculate range.
						time_rx_fin  = dw_project_time( rx_time );;
						time_tx_fin  = msg->t_tx;
						time_rx_resp = msg->t_rx;
 8000e90:	e887 000a 	stmia.w	r7, {r1, r3}
							.rangeEst = ( ToF_us*SPEED_OF_LIGHT_CM_PER_US )
						};
						*/

						float fppwr, cirp, fploss;
						dw_getRxQuality(&fppwr, &cirp, &fploss);
 8000e94:	f7ff fe66 	bl	8000b64 <dw_getRxQuality.isra.0>

						DWR_TwrTiming_t timing_info = 
 8000e98:	7a21      	ldrb	r1, [r4, #8]
 8000e9a:	79e3      	ldrb	r3, [r4, #7]
 8000e9c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8000ea0:	e9da 0100 	ldrd	r0, r1, [sl]
 8000ea4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8000ea8:	e9d9 0100 	ldrd	r0, r1, [r9]
 8000eac:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8000eb0:	e9d8 0100 	ldrd	r0, r1, [r8]
 8000eb4:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 8000eb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ebc:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 8000ec0:	e9d6 0100 	ldrd	r0, r1, [r6]
 8000ec4:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8000ec8:	886b      	ldrh	r3, [r5, #2]
 8000eca:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8000ece:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8000ed2:	7aa3      	ldrb	r3, [r4, #10]
 8000ed4:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 8000ed8:	e9db 0100 	ldrd	r0, r1, [fp]
 8000edc:	2300      	movs	r3, #0
 8000ede:	931c      	str	r3, [sp, #112]	; 0x70
 8000ee0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000ee2:	931d      	str	r3, [sp, #116]	; 0x74
 8000ee4:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
 8000ee8:	2300      	movs	r3, #0
							.cirp = cirp,
							.fploss = fploss
						};

						// range complete debug message
						dw_debug(DWR_EVENT_RXFIN);
 8000eea:	2006      	movs	r0, #6
						*/

						float fppwr, cirp, fploss;
						dw_getRxQuality(&fppwr, &cirp, &fploss);

						DWR_TwrTiming_t timing_info = 
 8000eec:	931e      	str	r3, [sp, #120]	; 0x78
							.cirp = cirp,
							.fploss = fploss
						};

						// range complete debug message
						dw_debug(DWR_EVENT_RXFIN);
 8000eee:	f7ff fe1f 	bl	8000b30 <dw_debug>

						// If this node has no gateway, relay the summary
						if( user_config.nodeOpts & DWR_OPT_SENDSUM )
 8000ef2:	792b      	ldrb	r3, [r5, #4]
 8000ef4:	0698      	lsls	r0, r3, #26
 8000ef6:	d560      	bpl.n	8000fba <decaranging_isr+0x3a2>
						{
							dw_send_range_sum(timing_info.seq, timing_info.srcAddr, time_tx_init, time_rx_init, time_tx_resp, time_rx_resp, time_tx_fin, time_rx_fin, fploss);
 8000ef8:	f8da 3000 	ldr.w	r3, [sl]
 8000efc:	9302      	str	r3, [sp, #8]
 8000efe:	f8d9 3000 	ldr.w	r3, [r9]
 8000f02:	9303      	str	r3, [sp, #12]
 8000f04:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000f08:	9304      	str	r3, [sp, #16]
 8000f0a:	f8d8 3000 	ldr.w	r3, [r8]
 8000f0e:	9305      	str	r3, [sp, #20]
 8000f10:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8000f14:	9306      	str	r3, [sp, #24]
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	f8bd c03c 	ldrh.w	ip, [sp, #60]	; 0x3c
 8000f1c:	9307      	str	r3, [sp, #28]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8000f24:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8000f28:	9308      	str	r3, [sp, #32]
 8000f2a:	f8d6 9000 	ldr.w	r9, [r6]
 8000f2e:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8000f32:	f8da a004 	ldr.w	sl, [sl, #4]
 8000f36:	f8db 7000 	ldr.w	r7, [fp]
 8000f3a:	f8db 6004 	ldr.w	r6, [fp, #4]
}

static void dw_send_range_sum(uint16_t seqNum, uint16_t msgSrc, uint64_t t1, uint64_t t2, uint64_t t3, uint64_t t4, uint64_t t5, uint64_t t6, float fploss )
{
	// calculate time to send broadcast in the future
	uint32_t time_now = dwt_readsystimestamphi32();
 8000f3e:	f7ff fcab 	bl	8000898 <dwt_readsystimestamphi32>
	uint32_t txtime = time_now + ( DWR_REPLY_DELAY_US )*1e3/DWR_TIMER_UNITS_HI_NS;
 8000f42:	f7ff fa63 	bl	800040c <__aeabi_ui2d>
 8000f46:	a376      	add	r3, pc, #472	; (adr r3, 8001120 <decaranging_isr+0x508>)
 8000f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4c:	f7ff f922 	bl	8000194 <__adddf3>
 8000f50:	f7ff fad2 	bl	80004f8 <__aeabi_d2uiz>
	txtime &= DWR_TIMER_HI_31_BITS;

	// create range summary message
	msgToSend.msgType  = DWR_MSG_RANGE_SUMMARY;
 8000f54:	4b78      	ldr	r3, [pc, #480]	; (8001138 <decaranging_isr+0x520>)
	msgToSend.rangeSeq = seqNum;
 8000f56:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24

	// message source address
	msgToSend.msgSrcAddr[0] = (uint8_t)(msgSrc);
 8000f5a:	709c      	strb	r4, [r3, #2]
	uint32_t time_now = dwt_readsystimestamphi32();
	uint32_t txtime = time_now + ( DWR_REPLY_DELAY_US )*1e3/DWR_TIMER_UNITS_HI_NS;
	txtime &= DWR_TIMER_HI_31_BITS;

	// create range summary message
	msgToSend.msgType  = DWR_MSG_RANGE_SUMMARY;
 8000f5c:	2204      	movs	r2, #4
 8000f5e:	701a      	strb	r2, [r3, #0]
	// message source address
	msgToSend.msgSrcAddr[0] = (uint8_t)(msgSrc);
	msgToSend.msgSrcAddr[1] = (uint8_t)(msgSrc>>8);

	// copy timestamps over
	msgToSend.t_tx = t1;
 8000f60:	9a02      	ldr	r2, [sp, #8]
 8000f62:	605a      	str	r2, [r3, #4]
	msgToSend.t_rx = t2;
 8000f64:	9a03      	ldr	r2, [sp, #12]
 8000f66:	60da      	str	r2, [r3, #12]
 8000f68:	9a04      	ldr	r2, [sp, #16]
 8000f6a:	611a      	str	r2, [r3, #16]
	msgToSend.ts3 = t3;
 8000f6c:	9a05      	ldr	r2, [sp, #20]
 8000f6e:	615a      	str	r2, [r3, #20]
 8000f70:	9a06      	ldr	r2, [sp, #24]
 8000f72:	619a      	str	r2, [r3, #24]
	msgToSend.ts4 = t4;
 8000f74:	9a07      	ldr	r2, [sp, #28]
 8000f76:	61da      	str	r2, [r3, #28]
 8000f78:	9a08      	ldr	r2, [sp, #32]
 8000f7a:	621a      	str	r2, [r3, #32]
	msgToSend.msgType  = DWR_MSG_RANGE_SUMMARY;
	msgToSend.rangeSeq = seqNum;

	// message source address
	msgToSend.msgSrcAddr[0] = (uint8_t)(msgSrc);
	msgToSend.msgSrcAddr[1] = (uint8_t)(msgSrc>>8);
 8000f7c:	0a24      	lsrs	r4, r4, #8
	msgToSend.ts4 = t4;
	msgToSend.ts5 = t5;
	msgToSend.ts6 = t6;

	// path loss
	msgToSend.fploss = (uint8_t)(fploss*-10);
 8000f7e:	2200      	movs	r2, #0
static void dw_send_range_sum(uint16_t seqNum, uint16_t msgSrc, uint64_t t1, uint64_t t2, uint64_t t3, uint64_t t4, uint64_t t5, uint64_t t6, float fploss )
{
	// calculate time to send broadcast in the future
	uint32_t time_now = dwt_readsystimestamphi32();
	uint32_t txtime = time_now + ( DWR_REPLY_DELAY_US )*1e3/DWR_TIMER_UNITS_HI_NS;
	txtime &= DWR_TIMER_HI_31_BITS;
 8000f80:	f020 0101 	bic.w	r1, r0, #1

	// create range summary message
	msgToSend.msgType  = DWR_MSG_RANGE_SUMMARY;
	msgToSend.rangeSeq = seqNum;
 8000f84:	f883 c001 	strb.w	ip, [r3, #1]

	// message source address
	msgToSend.msgSrcAddr[0] = (uint8_t)(msgSrc);
	msgToSend.msgSrcAddr[1] = (uint8_t)(msgSrc>>8);
 8000f88:	70dc      	strb	r4, [r3, #3]

	// copy timestamps over
	msgToSend.t_tx = t1;
 8000f8a:	f8c3 a008 	str.w	sl, [r3, #8]
	msgToSend.t_rx = t2;
	msgToSend.ts3 = t3;
	msgToSend.ts4 = t4;
	msgToSend.ts5 = t5;
 8000f8e:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
 8000f92:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28
	msgToSend.ts6 = t6;
 8000f96:	62df      	str	r7, [r3, #44]	; 0x2c
 8000f98:	631e      	str	r6, [r3, #48]	; 0x30

	// path loss
	msgToSend.fploss = (uint8_t)(fploss*-10);
 8000f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
static void dw_send_ieee_broadcast(DWR_MsgData_t *msg, uint32_t txtime)
{
	uint8_t bcast_addr[2];
	bcast_addr[0] = 0xFF;
	bcast_addr[1] = 0xFF;
	dw_send_ieee_data_delayed(bcast_addr, msg, txtime);
 8000f9e:	a80a      	add	r0, sp, #40	; 0x28
}

static void dw_send_ieee_broadcast(DWR_MsgData_t *msg, uint32_t txtime)
{
	uint8_t bcast_addr[2];
	bcast_addr[0] = 0xFF;
 8000fa0:	23ff      	movs	r3, #255	; 0xff
 8000fa2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
	bcast_addr[1] = 0xFF;
 8000fa6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
	dw_send_ieee_data_delayed(bcast_addr, msg, txtime);
 8000faa:	f7ff fe09 	bl	8000bc0 <dw_send_ieee_data_delayed.constprop.4>

	// send broadcast data frame
	dw_send_ieee_broadcast(&msgToSend, txtime);

	// only listen after the range_fin if we're told to always listen
	if( user_config.nodeOpts & DWR_OPT_RXALL )
 8000fae:	792b      	ldrb	r3, [r5, #4]
 8000fb0:	0799      	lsls	r1, r3, #30
 8000fb2:	d502      	bpl.n	8000fba <decaranging_isr+0x3a2>
		dwt_rxenable(0);
 8000fb4:	9800      	ldr	r0, [sp, #0]
 8000fb6:	f7ff fd61 	bl	8000a7c <dwt_rxenable>
						// If this node has no gateway, relay the summary
						if( user_config.nodeOpts & DWR_OPT_SENDSUM )
						{
							dw_send_range_sum(timing_info.seq, timing_info.srcAddr, time_tx_init, time_rx_init, time_tx_resp, time_rx_resp, time_tx_fin, time_rx_fin, fploss);
						}
						user_config.cbRangeComplete(&timing_info);
 8000fba:	4b5c      	ldr	r3, [pc, #368]	; (800112c <decaranging_isr+0x514>)
 8000fbc:	a80e      	add	r0, sp, #56	; 0x38
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	4798      	blx	r3
 8000fc2:	e07e      	b.n	80010c2 <decaranging_isr+0x4aa>
						dwt_rxenable(0);

						break;
					case DWR_MSG_RANGE_SUMMARY:
						// if this node is not set up to relay messages, turn receiver back on and quit
						if( !(user_config.nodeOpts & DWR_OPT_GATEWAY) )
 8000fc4:	4d59      	ldr	r5, [pc, #356]	; (800112c <decaranging_isr+0x514>)
 8000fc6:	792b      	ldrb	r3, [r5, #4]
 8000fc8:	065a      	lsls	r2, r3, #25
 8000fca:	d549      	bpl.n	8001060 <decaranging_isr+0x448>
							dwt_rxenable(0);
							break;
						}

						// package up the timing info from the message
						DWR_TwrTiming_t relay_info = 
 8000fcc:	2100      	movs	r1, #0
 8000fce:	2248      	movs	r2, #72	; 0x48
 8000fd0:	a80e      	add	r0, sp, #56	; 0x38
 8000fd2:	f000 fbe1 	bl	8001798 <memset>
 8000fd6:	7b22      	ldrb	r2, [r4, #12]
 8000fd8:	7ae3      	ldrb	r3, [r4, #11]
 8000fda:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8000fde:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8000fe2:	7a22      	ldrb	r2, [r4, #8]
 8000fe4:	79e3      	ldrb	r3, [r4, #7]
 8000fe6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8000fea:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8000fee:	7aa3      	ldrb	r3, [r4, #10]
 8000ff0:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
							.seq = msg->rangeSeq,
							.srcAddr = msg->msgSrcAddr[0] + (msg->msgSrcAddr[1] << 8),
							.dstAddr = frame->sourceAddr[0] + (frame->sourceAddr[1] << 8),
							.fppwr  = 0,
							.cirp   = 0,
							.fploss = ((float)msg->fploss)/-10.0
 8000ff4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8000ff8:	ee07 3a90 	vmov	s15, r3
 8000ffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
							dwt_rxenable(0);
							break;
						}

						// package up the timing info from the message
						DWR_TwrTiming_t relay_info = 
 8001000:	eeba 7a04 	vmov.f32	s14, #164	; 0xa4
 8001004:	eec7 7a87 	vdiv.f32	s15, s15, s14
						relay_info.tstamp3 = msg->ts3;
						relay_info.tstamp4 = msg->ts4;
						relay_info.tstamp5 = msg->ts5;
						relay_info.tstamp6 = msg->ts6;

						user_config.cbRangeComplete(&relay_info);
 8001008:	a80e      	add	r0, sp, #56	; 0x38
							dwt_rxenable(0);
							break;
						}

						// package up the timing info from the message
						DWR_TwrTiming_t relay_info = 
 800100a:	edcd 7a1e 	vstr	s15, [sp, #120]	; 0x78
							.fppwr  = 0,
							.cirp   = 0,
							.fploss = ((float)msg->fploss)/-10.0
						};

						relay_info.tstamp1 = msg->t_tx;
 800100e:	f8d4 200d 	ldr.w	r2, [r4, #13]
 8001012:	f8d4 3011 	ldr.w	r3, [r4, #17]
 8001016:	9311      	str	r3, [sp, #68]	; 0x44
 8001018:	9210      	str	r2, [sp, #64]	; 0x40
						relay_info.tstamp2 = msg->t_rx;
 800101a:	f8d4 2015 	ldr.w	r2, [r4, #21]
 800101e:	f8d4 3019 	ldr.w	r3, [r4, #25]
 8001022:	9313      	str	r3, [sp, #76]	; 0x4c
 8001024:	9212      	str	r2, [sp, #72]	; 0x48
						relay_info.tstamp3 = msg->ts3;
 8001026:	f8d4 201d 	ldr.w	r2, [r4, #29]
 800102a:	f8d4 3021 	ldr.w	r3, [r4, #33]	; 0x21
 800102e:	9315      	str	r3, [sp, #84]	; 0x54
 8001030:	9214      	str	r2, [sp, #80]	; 0x50
						relay_info.tstamp4 = msg->ts4;
 8001032:	f8d4 2025 	ldr.w	r2, [r4, #37]	; 0x25
 8001036:	f8d4 3029 	ldr.w	r3, [r4, #41]	; 0x29
 800103a:	9317      	str	r3, [sp, #92]	; 0x5c
 800103c:	9216      	str	r2, [sp, #88]	; 0x58
						relay_info.tstamp5 = msg->ts5;
 800103e:	f8d4 202d 	ldr.w	r2, [r4, #45]	; 0x2d
 8001042:	f8d4 3031 	ldr.w	r3, [r4, #49]	; 0x31
 8001046:	9319      	str	r3, [sp, #100]	; 0x64
 8001048:	9218      	str	r2, [sp, #96]	; 0x60
						relay_info.tstamp6 = msg->ts6;
 800104a:	f8d4 2035 	ldr.w	r2, [r4, #53]	; 0x35
 800104e:	f8d4 3039 	ldr.w	r3, [r4, #57]	; 0x39
 8001052:	921a      	str	r2, [sp, #104]	; 0x68
 8001054:	931b      	str	r3, [sp, #108]	; 0x6c

						user_config.cbRangeComplete(&relay_info);
 8001056:	68ab      	ldr	r3, [r5, #8]
 8001058:	4798      	blx	r3

						dw_debug(DWR_EVENT_RXSUM);
 800105a:	2009      	movs	r0, #9
 800105c:	f7ff fd68 	bl	8000b30 <dw_debug>

						// reset the receiver
						dwt_rxenable(0);
 8001060:	2000      	movs	r0, #0
 8001062:	e056      	b.n	8001112 <decaranging_isr+0x4fa>

						break;
					case DWR_MSG_BEACON:
						// for beacon messages, we should relay the RX time to the user if we're the correct node type
						if( user_config.nodeOpts & DWR_OPT_RSPBCN )
 8001064:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 800112c <decaranging_isr+0x514>
 8001068:	f898 3004 	ldrb.w	r3, [r8, #4]
 800106c:	06db      	lsls	r3, r3, #27
 800106e:	d5f7      	bpl.n	8001060 <decaranging_isr+0x448>
						{
							// extract the transmitted time
							time_tx_bcn = msg->t_tx;
 8001070:	f8d4 3011 	ldr.w	r3, [r4, #17]
 8001074:	f8d4 200d 	ldr.w	r2, [r4, #13]
 8001078:	4d30      	ldr	r5, [pc, #192]	; (800113c <decaranging_isr+0x524>)

							// get rx quality stats
							float fppwr, cirp, fploss;
							dw_getRxQuality(&fppwr, &cirp, &fploss);
 800107a:	a80b      	add	r0, sp, #44	; 0x2c
					case DWR_MSG_BEACON:
						// for beacon messages, we should relay the RX time to the user if we're the correct node type
						if( user_config.nodeOpts & DWR_OPT_RSPBCN )
						{
							// extract the transmitted time
							time_tx_bcn = msg->t_tx;
 800107c:	e885 000c 	stmia.w	r5, {r2, r3}

							// get rx quality stats
							float fppwr, cirp, fploss;
							dw_getRxQuality(&fppwr, &cirp, &fploss);
 8001080:	f7ff fd70 	bl	8000b64 <dw_getRxQuality.isra.0>

							// create beacon struct
							DWR_Beacon_t beacon = {
 8001084:	a80e      	add	r0, sp, #56	; 0x38
 8001086:	2100      	movs	r1, #0
 8001088:	2228      	movs	r2, #40	; 0x28
 800108a:	f000 fb85 	bl	8001798 <memset>
 800108e:	7a22      	ldrb	r2, [r4, #8]
 8001090:	79e3      	ldrb	r3, [r4, #7]
 8001092:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001096:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 800109a:	7aa3      	ldrb	r3, [r4, #10]
 800109c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80010a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80010a4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80010a8:	2300      	movs	r3, #0
 80010aa:	9315      	str	r3, [sp, #84]	; 0x54
 80010ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80010ae:	9316      	str	r3, [sp, #88]	; 0x58
 80010b0:	2300      	movs	r3, #0
 80010b2:	9317      	str	r3, [sp, #92]	; 0x5c
 80010b4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
								.fppwr = fppwr,
								.cirp = cirp,
								.fploss = fploss
							};
							// call user-provided callback with the DW1000's rx timestamp
							user_config.cbBeaconReceived(&beacon);
 80010b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80010bc:	a80e      	add	r0, sp, #56	; 0x38
 80010be:	4798      	blx	r3
 80010c0:	e7ce      	b.n	8001060 <decaranging_isr+0x448>
						// reset the receiver
						dwt_rxenable(0);
						break;
					default:
						// We'll only get here if someone's sending 802.15.4 broadcast frames and not following our protocol
						current_state = DWR_STATE_IDLE;
 80010c2:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <decaranging_isr+0x528>)
 80010c4:	2000      	movs	r0, #0
 80010c6:	7018      	strb	r0, [r3, #0]
 80010c8:	e023      	b.n	8001112 <decaranging_isr+0x4fa>

			// ---------- HANDLE OTHER ------------
			else
			{
				// we don't handle any other frame types, but if we happened to get here turn rx back on.
				current_state = DWR_STATE_IDLE;
 80010ca:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <decaranging_isr+0x528>)
 80010cc:	701d      	strb	r5, [r3, #0]
 80010ce:	e01f      	b.n	8001110 <decaranging_isr+0x4f8>
	} // end if CRC is good
	else
	//
	// Check for TX frame sent event and signal to upper layer.
	//
	if (status & SYS_STATUS_TXFRS)  // Transmit Frame Sent
 80010d0:	f014 0680 	ands.w	r6, r4, #128	; 0x80
	{
		bitsToClear |= CLEAR_ALLTX_EVENTS;
		dwt_write32bitreg(SYS_STATUS_ID, bitsToClear) ;       
 80010d4:	f04f 000f 	mov.w	r0, #15
	} // end if CRC is good
	else
	//
	// Check for TX frame sent event and signal to upper layer.
	//
	if (status & SYS_STATUS_TXFRS)  // Transmit Frame Sent
 80010d8:	d006      	beq.n	80010e8 <decaranging_isr+0x4d0>
	{
		bitsToClear |= CLEAR_ALLTX_EVENTS;
		dwt_write32bitreg(SYS_STATUS_ID, bitsToClear) ;       
 80010da:	22f8      	movs	r2, #248	; 0xf8
 80010dc:	f7ff fbf8 	bl	80008d0 <dwt_write32bitoffsetreg>

		// let the user know the transmission was successful
		dw_debug(DWR_EVENT_TXGOOD);
 80010e0:	2002      	movs	r0, #2
 80010e2:	f7ff fd25 	bl	8000b30 <dw_debug>
 80010e6:	e016      	b.n	8001116 <decaranging_isr+0x4fe>
	}
	else if (status & SYS_STATUS_RXRFTO) // Receiver Frame Wait timeout:
 80010e8:	f414 3500 	ands.w	r5, r4, #131072	; 0x20000
 80010ec:	d007      	beq.n	80010fe <decaranging_isr+0x4e6>
	{
		bitsToClear |= status & SYS_STATUS_RXRFTO;
		dwt_write32bitreg(SYS_STATUS_ID, bitsToClear);
 80010ee:	4631      	mov	r1, r6
 80010f0:	462a      	mov	r2, r5
 80010f2:	f7ff fbed 	bl	80008d0 <dwt_write32bitoffsetreg>

		// force into idle
		dwt_forcetrxoff();
 80010f6:	f7ff fc95 	bl	8000a24 <dwt_forcetrxoff>
		// listen again
		dwt_rxenable(0);       
 80010fa:	4630      	mov	r0, r6
 80010fc:	e009      	b.n	8001112 <decaranging_isr+0x4fa>
	}
	else // (status & CLEAR_ALLRXERROR_EVENTS) //catches all other error events 
	{
		bitsToClear |= status & CLEAR_ALLRXERROR_EVENTS;
		dwt_write32bitreg(SYS_STATUS_ID, bitsToClear);    
 80010fe:	4a11      	ldr	r2, [pc, #68]	; (8001144 <decaranging_isr+0x52c>)
 8001100:	4629      	mov	r1, r5
 8001102:	4022      	ands	r2, r4
 8001104:	f7ff fbe4 	bl	80008d0 <dwt_write32bitoffsetreg>

		dwt_forcetrxoff(); //this will clear all events
 8001108:	f7ff fc8c 	bl	8000a24 <dwt_forcetrxoff>
		dwt_rxreset();	//reset the RX
 800110c:	f7ff fcf8 	bl	8000b00 <dwt_rxreset>

		dwt_rxenable(0);
 8001110:	4628      	mov	r0, r5
 8001112:	f7ff fcb3 	bl	8000a7c <dwt_rxenable>

		status &= CLEAR_ALLTX_EVENTS;
	}
}
 8001116:	b021      	add	sp, #132	; 0x84
 8001118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800111c:	f3af 8000 	nop.w
 8001120:	00000000 	.word	0x00000000
 8001124:	40fe8480 	.word	0x40fe8480
 8001128:	20000080 	.word	0x20000080
 800112c:	20000130 	.word	0x20000130
 8001130:	200001a0 	.word	0x200001a0
 8001134:	20000128 	.word	0x20000128
 8001138:	200000b0 	.word	0x200000b0
 800113c:	20000198 	.word	0x20000198
 8001140:	2000007c 	.word	0x2000007c
 8001144:	24279000 	.word	0x24279000
 8001148:	200001a8 	.word	0x200001a8
 800114c:	200000a8 	.word	0x200000a8
 8001150:	200001b8 	.word	0x200001b8
 8001154:	200001b0 	.word	0x200001b0

08001158 <dw_spi_configprescaler>:
	dw_sleep_usec(msec*1000);
}


void dw_spi_configprescaler(uint16_t scalingfactor)
{
 8001158:	b530      	push	{r4, r5, lr}
	SPI_InitTypeDef SPI_InitStructure;

	SPI_I2S_DeInit(DW_SPI);
 800115a:	4c15      	ldr	r4, [pc, #84]	; (80011b0 <dw_spi_configprescaler+0x58>)
	dw_sleep_usec(msec*1000);
}


void dw_spi_configprescaler(uint16_t scalingfactor)
{
 800115c:	b087      	sub	sp, #28
 800115e:	4605      	mov	r5, r0
	SPI_InitTypeDef SPI_InitStructure;

	SPI_I2S_DeInit(DW_SPI);
 8001160:	4620      	mov	r0, r4
 8001162:	f000 f88d 	bl	8001280 <SPI_I2S_DeInit>

	// SPI Mode setup
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8001166:	f44f 7282 	mov.w	r2, #260	; 0x104
	SPI_InitTypeDef SPI_InitStructure;

	SPI_I2S_DeInit(DW_SPI);

	// SPI Mode setup
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800116a:	2300      	movs	r3, #0
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 800116c:	f8ad 2006 	strh.w	r2, [sp, #6]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8001170:	f44f 62e0 	mov.w	r2, #1792	; 0x700
	SPI_InitTypeDef SPI_InitStructure;

	SPI_I2S_DeInit(DW_SPI);

	// SPI Mode setup
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001174:	f8ad 3004 	strh.w	r3, [sp, #4]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8001178:	f8ad 2008 	strh.w	r2, [sp, #8]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;	 //
 800117c:	f8ad 300a 	strh.w	r3, [sp, #10]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8001180:	f44f 7200 	mov.w	r2, #512	; 0x200
	// SPI Mode setup
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;	 //
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8001184:	f8ad 300c 	strh.w	r3, [sp, #12]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
	SPI_InitStructure.SPI_BaudRatePrescaler = scalingfactor; //sets BR[2:0] bits - baudrate in SPI_CR1 reg bits 4-6
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8001188:	f8ad 3012 	strh.w	r3, [sp, #18]
	SPI_InitStructure.SPI_CRCPolynomial = 7;

	SPI_Init(DW_SPI, &SPI_InitStructure);
 800118c:	4620      	mov	r0, r4
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;	 //
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
	SPI_InitStructure.SPI_BaudRatePrescaler = scalingfactor; //sets BR[2:0] bits - baudrate in SPI_CR1 reg bits 4-6
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 800118e:	2307      	movs	r3, #7

	SPI_Init(DW_SPI, &SPI_InitStructure);
 8001190:	a901      	add	r1, sp, #4
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;	 //
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8001192:	f8ad 200e 	strh.w	r2, [sp, #14]
	SPI_InitStructure.SPI_BaudRatePrescaler = scalingfactor; //sets BR[2:0] bits - baudrate in SPI_CR1 reg bits 4-6
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 8001196:	f8ad 3014 	strh.w	r3, [sp, #20]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;	 //
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
	SPI_InitStructure.SPI_BaudRatePrescaler = scalingfactor; //sets BR[2:0] bits - baudrate in SPI_CR1 reg bits 4-6
 800119a:	f8ad 5010 	strh.w	r5, [sp, #16]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
	SPI_InitStructure.SPI_CRCPolynomial = 7;

	SPI_Init(DW_SPI, &SPI_InitStructure);
 800119e:	f000 f8ad 	bl	80012fc <SPI_Init>

	// Enable SPI
	SPI_Cmd(DW_SPI, ENABLE);
 80011a2:	4620      	mov	r0, r4
 80011a4:	2101      	movs	r1, #1
 80011a6:	f000 f8fb 	bl	80013a0 <SPI_Cmd>
}
 80011aa:	b007      	add	sp, #28
 80011ac:	bd30      	pop	{r4, r5, pc}
 80011ae:	bf00      	nop
 80011b0:	40013000 	.word	0x40013000

080011b4 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80011b4:	78c2      	ldrb	r2, [r0, #3]
 80011b6:	7803      	ldrb	r3, [r0, #0]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80011b8:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80011ba:	b30a      	cbz	r2, 8001200 <NVIC_Init+0x4c>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80011bc:	4a16      	ldr	r2, [pc, #88]	; (8001218 <NVIC_Init+0x64>)
 80011be:	68d4      	ldr	r4, [r2, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80011c0:	7842      	ldrb	r2, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80011c2:	43e4      	mvns	r4, r4
 80011c4:	f3c4 2402 	ubfx	r4, r4, #8, #3
    tmppre = (0x4 - tmppriority);
 80011c8:	f1c4 0104 	rsb	r1, r4, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80011cc:	fa02 f101 	lsl.w	r1, r2, r1
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 80011d0:	220f      	movs	r2, #15
 80011d2:	40e2      	lsrs	r2, r4

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80011d4:	7884      	ldrb	r4, [r0, #2]
 80011d6:	4022      	ands	r2, r4
 80011d8:	430a      	orrs	r2, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80011da:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80011de:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    tmppriority = tmppriority << 0x04;
 80011e2:	0112      	lsls	r2, r2, #4
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80011ea:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80011ec:	2201      	movs	r2, #1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80011ee:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80011f0:	f003 031f 	and.w	r3, r3, #31
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80011f8:	4a08      	ldr	r2, [pc, #32]	; (800121c <NVIC_Init+0x68>)
 80011fa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80011fe:	bd10      	pop	{r4, pc}
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001200:	095a      	lsrs	r2, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001202:	2101      	movs	r1, #1
 8001204:	f003 031f 	and.w	r3, r3, #31
 8001208:	4099      	lsls	r1, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800120a:	f102 0320 	add.w	r3, r2, #32
 800120e:	4a03      	ldr	r2, [pc, #12]	; (800121c <NVIC_Init+0x68>)
 8001210:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001214:	bd10      	pop	{r4, pc}
 8001216:	bf00      	nop
 8001218:	e000ed00 	.word	0xe000ed00
 800121c:	e000e100 	.word	0xe000e100

08001220 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <RCC_AHBPeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8001222:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001224:	b109      	cbz	r1, 800122a <RCC_AHBPeriphClockCmd+0xa>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8001226:	4310      	orrs	r0, r2
 8001228:	e001      	b.n	800122e <RCC_AHBPeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 800122a:	ea22 0000 	bic.w	r0, r2, r0
 800122e:	6158      	str	r0, [r3, #20]
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40021000 	.word	0x40021000

08001238 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <RCC_APB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800123a:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800123c:	b109      	cbz	r1, 8001242 <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800123e:	4310      	orrs	r0, r2
 8001240:	e001      	b.n	8001246 <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001242:	ea22 0000 	bic.w	r0, r2, r0
 8001246:	6198      	str	r0, [r3, #24]
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40021000 	.word	0x40021000

08001250 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001250:	4b04      	ldr	r3, [pc, #16]	; (8001264 <RCC_APB2PeriphResetCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001252:	68da      	ldr	r2, [r3, #12]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001254:	b109      	cbz	r1, 800125a <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001256:	4310      	orrs	r0, r2
 8001258:	e001      	b.n	800125e <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800125a:	ea22 0000 	bic.w	r0, r2, r0
 800125e:	60d8      	str	r0, [r3, #12]
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40021000 	.word	0x40021000

08001268 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <RCC_APB1PeriphResetCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800126a:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800126c:	b109      	cbz	r1, 8001272 <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800126e:	4310      	orrs	r0, r2
 8001270:	e001      	b.n	8001276 <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001272:	ea22 0000 	bic.w	r0, r2, r0
 8001276:	6118      	str	r0, [r3, #16]
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000

08001280 <SPI_I2S_DeInit>:
  * @param  SPIx: To select the SPIx peripheral, where x can be: 1, 2 or 3 
  *         in SPI mode.
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8001280:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8001282:	4b1a      	ldr	r3, [pc, #104]	; (80012ec <SPI_I2S_DeInit+0x6c>)
 8001284:	4298      	cmp	r0, r3
 8001286:	d107      	bne.n	8001298 <SPI_I2S_DeInit+0x18>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8001288:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800128c:	2101      	movs	r1, #1
 800128e:	f7ff ffdf 	bl	8001250 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8001292:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001296:	e023      	b.n	80012e0 <SPI_I2S_DeInit+0x60>
  }
  else if (SPIx == SPI2)
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <SPI_I2S_DeInit+0x70>)
 800129a:	4298      	cmp	r0, r3
 800129c:	d107      	bne.n	80012ae <SPI_I2S_DeInit+0x2e>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 800129e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012a2:	2101      	movs	r1, #1
 80012a4:	f7ff ffe0 	bl	8001268 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 80012a8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012ac:	e009      	b.n	80012c2 <SPI_I2S_DeInit+0x42>
  }
  else if (SPIx == SPI3)
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <SPI_I2S_DeInit+0x74>)
 80012b0:	4298      	cmp	r0, r3
 80012b2:	d10b      	bne.n	80012cc <SPI_I2S_DeInit+0x4c>
  {
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 80012b4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012b8:	2101      	movs	r1, #1
 80012ba:	f7ff ffd5 	bl	8001268 <RCC_APB1PeriphResetCmd>
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 80012be:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012c2:	2100      	movs	r1, #0
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
      /* Release SPI4 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
    }
  }
}
 80012c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else if (SPIx == SPI3)
  {
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 80012c8:	f7ff bfce 	b.w	8001268 <RCC_APB1PeriphResetCmd>
  }
  else
  {
    if (SPIx == SPI4)
 80012cc:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <SPI_I2S_DeInit+0x78>)
 80012ce:	4298      	cmp	r0, r3
 80012d0:	d10b      	bne.n	80012ea <SPI_I2S_DeInit+0x6a>
    {
      /* Enable SPI4 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 80012d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012d6:	2101      	movs	r1, #1
 80012d8:	f7ff ffba 	bl	8001250 <RCC_APB2PeriphResetCmd>
      /* Release SPI4 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 80012dc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012e0:	2100      	movs	r1, #0
    }
  }
}
 80012e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (SPIx == SPI4)
    {
      /* Enable SPI4 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
      /* Release SPI4 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 80012e6:	f7ff bfb3 	b.w	8001250 <RCC_APB2PeriphResetCmd>
 80012ea:	bd08      	pop	{r3, pc}
 80012ec:	40013000 	.word	0x40013000
 80012f0:	40003800 	.word	0x40003800
 80012f4:	40003c00 	.word	0x40003c00
 80012f8:	40013c00 	.word	0x40013c00

080012fc <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80012fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

  /* Configuring the SPI in master mode */
  if(SPI_InitStruct->SPI_Mode == SPI_Mode_Master)
 8001300:	884d      	ldrh	r5, [r1, #2]
 8001302:	880e      	ldrh	r6, [r1, #0]
 8001304:	88cb      	ldrh	r3, [r1, #6]
 8001306:	890c      	ldrh	r4, [r1, #8]
 8001308:	894a      	ldrh	r2, [r1, #10]
 800130a:	f8b1 800c 	ldrh.w	r8, [r1, #12]
 800130e:	f8b1 e00e 	ldrh.w	lr, [r1, #14]
 8001312:	888f      	ldrh	r7, [r1, #4]
 8001314:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 8001318:	d11b      	bne.n	8001352 <SPI_Init+0x56>
 800131a:	431e      	orrs	r6, r3
 800131c:	f446 7682 	orr.w	r6, r6, #260	; 0x104
 8001320:	ea46 0504 	orr.w	r5, r6, r4
  {
/*---------------------------- SPIx CR1 Configuration ------------------------*/
    /* Get the SPIx CR1 value */
    tmpreg = SPIx->CR1;
 8001324:	f8b0 c000 	ldrh.w	ip, [r0]
 8001328:	ea45 0402 	orr.w	r4, r5, r2
 800132c:	ea44 0208 	orr.w	r2, r4, r8
    /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) |
 8001330:	ea42 030e 	orr.w	r3, r2, lr
  {
/*---------------------------- SPIx CR1 Configuration ------------------------*/
    /* Get the SPIx CR1 value */
    tmpreg = SPIx->CR1;
    /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
    tmpreg &= CR1_CLEAR_MASK;
 8001334:	f40c 5c41 	and.w	ip, ip, #12352	; 0x3040
    /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) |
 8001338:	ea4c 0303 	orr.w	r3, ip, r3
 800133c:	b29b      	uxth	r3, r3
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) |
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
                         SPI_InitStruct->SPI_FirstBit)));
    /* Write to SPIx CR1 */
    SPIx->CR1 = tmpreg;
 800133e:	8003      	strh	r3, [r0, #0]
    /*-------------------------Data Size Configuration -----------------------*/
    /* Get the SPIx CR2 value */
    tmpreg = SPIx->CR2;
 8001340:	8882      	ldrh	r2, [r0, #4]
    /* Clear DS[3:0] bits */
    tmpreg &= (uint16_t)~SPI_CR2_DS;
 8001342:	f422 6370 	bic.w	r3, r2, #3840	; 0xf00
 8001346:	041b      	lsls	r3, r3, #16
 8001348:	0c1b      	lsrs	r3, r3, #16
    /* Configure SPIx: Data Size */
    tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 800134a:	433b      	orrs	r3, r7
 800134c:	b29b      	uxth	r3, r3
    /* Write to SPIx CR2 */
    SPIx->CR2 = tmpreg;
 800134e:	8083      	strh	r3, [r0, #4]
 8001350:	e01c      	b.n	800138c <SPI_Init+0x90>
  /* Configuring the SPI in slave mode */
  else
  {
/*---------------------------- Data size Configuration -----------------------*/
    /* Get the SPIx CR2 value */
    tmpreg = SPIx->CR2;
 8001352:	f8b0 c004 	ldrh.w	ip, [r0, #4]
    /* Clear DS[3:0] bits */
    tmpreg &= (uint16_t)~SPI_CR2_DS;
 8001356:	f42c 6c70 	bic.w	ip, ip, #3840	; 0xf00
 800135a:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 800135e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
    /* Configure SPIx: Data Size */
    tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 8001362:	ea4c 0707 	orr.w	r7, ip, r7
    /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) | 
 8001366:	432e      	orrs	r6, r5
    /* Get the SPIx CR2 value */
    tmpreg = SPIx->CR2;
    /* Clear DS[3:0] bits */
    tmpreg &= (uint16_t)~SPI_CR2_DS;
    /* Configure SPIx: Data Size */
    tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 8001368:	b2bf      	uxth	r7, r7
 800136a:	4333      	orrs	r3, r6
    /* Write to SPIx CR2 */
    SPIx->CR2 = tmpreg;
 800136c:	8087      	strh	r7, [r0, #4]
 800136e:	4323      	orrs	r3, r4
/*---------------------------- SPIx CR1 Configuration ------------------------*/
    /* Get the SPIx CR1 value */
    tmpreg = SPIx->CR1;
 8001370:	8807      	ldrh	r7, [r0, #0]
 8001372:	4313      	orrs	r3, r2
 8001374:	ea43 0308 	orr.w	r3, r3, r8
    /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
    tmpreg &= CR1_CLEAR_MASK;
 8001378:	f407 5741 	and.w	r7, r7, #12352	; 0x3040
    /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) | 
 800137c:	ea43 030e 	orr.w	r3, r3, lr
 8001380:	ea47 0e03 	orr.w	lr, r7, r3
 8001384:	fa1f fe8e 	uxth.w	lr, lr
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) | 
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
                         SPI_InitStruct->SPI_FirstBit)));

    /* Write to SPIx CR1 */
    SPIx->CR1 = tmpreg;
 8001388:	f8a0 e000 	strh.w	lr, [r0]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 800138c:	8b83      	ldrh	r3, [r0, #28]
 800138e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001392:	041b      	lsls	r3, r3, #16
 8001394:	0c1b      	lsrs	r3, r3, #16
 8001396:	8383      	strh	r3, [r0, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8001398:	8a0b      	ldrh	r3, [r1, #16]
 800139a:	8203      	strh	r3, [r0, #16]
 800139c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080013a0 <SPI_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 80013a0:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80013a2:	b119      	cbz	r1, 80013ac <SPI_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013aa:	e003      	b.n	80013b4 <SPI_Cmd+0x14>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 80013ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013b0:	041b      	lsls	r3, r3, #16
 80013b2:	0c1b      	lsrs	r3, r3, #16
 80013b4:	8003      	strh	r3, [r0, #0]
 80013b6:	4770      	bx	lr

080013b8 <SPI_DataSizeConfig>:
  
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATA_SIZE(SPI_DataSize));
  /* Read the CR2 register */
  tmpreg = SPIx->CR2;
 80013b8:	8883      	ldrh	r3, [r0, #4]
  /* Clear DS[3:0] bits */
  tmpreg &= (uint16_t)~SPI_CR2_DS;
 80013ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80013be:	041b      	lsls	r3, r3, #16
 80013c0:	0c1b      	lsrs	r3, r3, #16
  /* Set new DS[3:0] bits value */
  tmpreg |= SPI_DataSize;
 80013c2:	4319      	orrs	r1, r3
  SPIx->CR2 = tmpreg;
 80013c4:	8081      	strh	r1, [r0, #4]
 80013c6:	4770      	bx	lr

080013c8 <SPI_RxFIFOThresholdConfig>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_RX_FIFO_THRESHOLD(SPI_RxFIFOThreshold));

  /* Clear FRXTH bit */
  SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_FRXTH);
 80013c8:	8883      	ldrh	r3, [r0, #4]
 80013ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80013ce:	041b      	lsls	r3, r3, #16
 80013d0:	0c1b      	lsrs	r3, r3, #16
 80013d2:	8083      	strh	r3, [r0, #4]

  /* Set new FRXTH bit value */
  SPIx->CR2 |= SPI_RxFIFOThreshold;
 80013d4:	8883      	ldrh	r3, [r0, #4]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	4319      	orrs	r1, r3
 80013da:	8081      	strh	r1, [r0, #4]
 80013dc:	4770      	bx	lr

080013de <SPI_SSOutputCmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 80013de:	8883      	ldrh	r3, [r0, #4]
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80013e0:	b119      	cbz	r1, 80013ea <SPI_SSOutputCmd+0xc>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	f043 0304 	orr.w	r3, r3, #4
 80013e8:	e003      	b.n	80013f2 <SPI_SSOutputCmd+0x14>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 80013ea:	f023 0304 	bic.w	r3, r3, #4
 80013ee:	041b      	lsls	r3, r3, #16
 80013f0:	0c1b      	lsrs	r3, r3, #16
 80013f2:	8083      	strh	r3, [r0, #4]
 80013f4:	4770      	bx	lr

080013f6 <SYSCFG_EXTILineConfig>:

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80013f6:	f001 0303 	and.w	r3, r1, #3
 80013fa:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80013fe:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001402:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
  * @param  EXTI_PinSourcex: specifies the EXTI line to be configured.
  *         This parameter can be EXTI_PinSourcex where x can be (0..15)
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8001406:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8001408:	009b      	lsls	r3, r3, #2
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 800140a:	688c      	ldr	r4, [r1, #8]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 800140c:	220f      	movs	r2, #15
 800140e:	409a      	lsls	r2, r3
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8001410:	ea24 0202 	bic.w	r2, r4, r2
 8001414:	608a      	str	r2, [r1, #8]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8001416:	688a      	ldr	r2, [r1, #8]
 8001418:	4098      	lsls	r0, r3
 800141a:	4302      	orrs	r2, r0
 800141c:	608a      	str	r2, [r1, #8]
 800141e:	bd10      	pop	{r4, pc}

08001420 <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 8001420:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001422:	2300      	movs	r3, #0
 8001424:	680e      	ldr	r6, [r1, #0]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001426:	461c      	mov	r4, r3
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001428:	2501      	movs	r5, #1
 800142a:	40a5      	lsls	r5, r4

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800142c:	ea05 0e06 	and.w	lr, r5, r6

    if (currentpin == pos)
 8001430:	45ae      	cmp	lr, r5
 8001432:	d12b      	bne.n	800148c <GPIO_Init+0x6c>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001434:	790f      	ldrb	r7, [r1, #4]
 8001436:	1e7a      	subs	r2, r7, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d815      	bhi.n	8001468 <GPIO_Init+0x48>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800143c:	6885      	ldr	r5, [r0, #8]
 800143e:	2203      	movs	r2, #3
 8001440:	409a      	lsls	r2, r3
 8001442:	ea25 0202 	bic.w	r2, r5, r2
 8001446:	6082      	str	r2, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001448:	794d      	ldrb	r5, [r1, #5]
 800144a:	6882      	ldr	r2, [r0, #8]
 800144c:	409d      	lsls	r5, r3
 800144e:	4315      	orrs	r5, r2
 8001450:	6085      	str	r5, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8001452:	8882      	ldrh	r2, [r0, #4]
 8001454:	b292      	uxth	r2, r2
 8001456:	ea22 020e 	bic.w	r2, r2, lr
 800145a:	8082      	strh	r2, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800145c:	798a      	ldrb	r2, [r1, #6]
 800145e:	8885      	ldrh	r5, [r0, #4]
 8001460:	40a2      	lsls	r2, r4
 8001462:	432a      	orrs	r2, r5
 8001464:	b292      	uxth	r2, r2
 8001466:	8082      	strh	r2, [r0, #4]
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001468:	2203      	movs	r2, #3
 800146a:	6805      	ldr	r5, [r0, #0]
 800146c:	409a      	lsls	r2, r3
 800146e:	43d2      	mvns	r2, r2
 8001470:	4015      	ands	r5, r2
 8001472:	6005      	str	r5, [r0, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001474:	6805      	ldr	r5, [r0, #0]
 8001476:	409f      	lsls	r7, r3
 8001478:	432f      	orrs	r7, r5
 800147a:	6007      	str	r7, [r0, #0]

      /* Use temporary variable to update PUPDR register configuration, to avoid 
         unexpected transition in the GPIO pin configuration. */
      tmpreg = GPIOx->PUPDR;
 800147c:	68c7      	ldr	r7, [r0, #12]
      tmpreg &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800147e:	4017      	ands	r7, r2
      tmpreg |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001480:	79ca      	ldrb	r2, [r1, #7]
 8001482:	fa02 f503 	lsl.w	r5, r2, r3
 8001486:	ea47 0205 	orr.w	r2, r7, r5
      GPIOx->PUPDR = tmpreg;
 800148a:	60c2      	str	r2, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800148c:	3401      	adds	r4, #1
 800148e:	2c10      	cmp	r4, #16
 8001490:	f103 0302 	add.w	r3, r3, #2
 8001494:	d1c8      	bne.n	8001428 <GPIO_Init+0x8>
      tmpreg &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      tmpreg |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
      GPIOx->PUPDR = tmpreg;
    }
  }
}
 8001496:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001498 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8001498:	6181      	str	r1, [r0, #24]
 800149a:	4770      	bx	lr

0800149c <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 800149c:	8501      	strh	r1, [r0, #40]	; 0x28
 800149e:	4770      	bx	lr

080014a0 <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80014a0:	f001 0307 	and.w	r3, r1, #7
 80014a4:	08c9      	lsrs	r1, r1, #3
 80014a6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
  *        for the detailed mapping of the system and peripherals alternate 
  *        function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80014aa:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80014ac:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80014ae:	6a04      	ldr	r4, [r0, #32]
 80014b0:	210f      	movs	r1, #15
 80014b2:	4099      	lsls	r1, r3
 80014b4:	ea24 0101 	bic.w	r1, r4, r1
 80014b8:	6201      	str	r1, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80014ba:	6a01      	ldr	r1, [r0, #32]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80014bc:	409a      	lsls	r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80014be:	4311      	orrs	r1, r2
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80014c0:	6201      	str	r1, [r0, #32]
 80014c2:	bd10      	pop	{r4, pc}

080014c4 <EXTI_Init>:
  assert_param(IS_EXTI_LINE_ALL(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
      
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80014c4:	7982      	ldrb	r2, [r0, #6]
 80014c6:	6803      	ldr	r3, [r0, #0]
  * @retval None
  */
  

void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80014c8:	b570      	push	{r4, r5, r6, lr}
 80014ca:	7904      	ldrb	r4, [r0, #4]
  assert_param(IS_EXTI_LINE_ALL(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
      
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80014cc:	2a00      	cmp	r2, #0
 80014ce:	d064      	beq.n	800159a <EXTI_Init+0xd6>
  {
    /* Clear EXTI line configuration */   
    *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));   
 80014d0:	f023 011f 	bic.w	r1, r3, #31
 80014d4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80014d8:	f501 3182 	add.w	r1, r1, #66560	; 0x10400
 80014dc:	f003 021f 	and.w	r2, r3, #31
 80014e0:	680d      	ldr	r5, [r1, #0]
 80014e2:	2301      	movs	r3, #1
 80014e4:	fa03 f202 	lsl.w	r2, r3, r2
 80014e8:	ea25 0202 	bic.w	r2, r5, r2
 80014ec:	600a      	str	r2, [r1, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->EMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80014ee:	6802      	ldr	r2, [r0, #0]
 80014f0:	4d32      	ldr	r5, [pc, #200]	; (80015bc <EXTI_Init+0xf8>)
 80014f2:	f022 061f 	bic.w	r6, r2, #31
 80014f6:	f002 021f 	and.w	r2, r2, #31
 80014fa:	5971      	ldr	r1, [r6, r5]
 80014fc:	fa03 f202 	lsl.w	r2, r3, r2
 8001500:	ea21 0202 	bic.w	r2, r1, r2
 8001504:	5172      	str	r2, [r6, r5]
     
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 8001506:	6801      	ldr	r1, [r0, #0]
 8001508:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 800150c:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8001510:	f021 041f 	bic.w	r4, r1, #31

    *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8001514:	f001 011f 	and.w	r1, r1, #31
 8001518:	5915      	ldr	r5, [r2, r4]
 800151a:	fa03 f101 	lsl.w	r1, r3, r1
 800151e:	4329      	orrs	r1, r5
 8001520:	5111      	str	r1, [r2, r4]
    
    tmp = (uint32_t)EXTI_BASE;

    /* Clear Rising Falling edge configuration */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8001522:	6802      	ldr	r2, [r0, #0]
 8001524:	4d26      	ldr	r5, [pc, #152]	; (80015c0 <EXTI_Init+0xfc>)
 8001526:	f022 041f 	bic.w	r4, r2, #31
 800152a:	f002 021f 	and.w	r2, r2, #31
 800152e:	5961      	ldr	r1, [r4, r5]
 8001530:	fa03 f202 	lsl.w	r2, r3, r2
 8001534:	ea21 0202 	bic.w	r2, r1, r2
 8001538:	5162      	str	r2, [r4, r5]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 800153a:	6802      	ldr	r2, [r0, #0]
 800153c:	4c21      	ldr	r4, [pc, #132]	; (80015c4 <EXTI_Init+0x100>)
 800153e:	f022 061f 	bic.w	r6, r2, #31
 8001542:	f002 021f 	and.w	r2, r2, #31
 8001546:	5931      	ldr	r1, [r6, r4]
 8001548:	fa03 f202 	lsl.w	r2, r3, r2
 800154c:	ea21 0202 	bic.w	r2, r1, r2
    
      /* Select the trigger for the selected interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8001550:	7941      	ldrb	r1, [r0, #5]
    
    tmp = (uint32_t)EXTI_BASE;

    /* Clear Rising Falling edge configuration */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8001552:	5132      	str	r2, [r6, r4]
    
      /* Select the trigger for the selected interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8001554:	2910      	cmp	r1, #16
 8001556:	6802      	ldr	r2, [r0, #0]
 8001558:	d112      	bne.n	8001580 <EXTI_Init+0xbc>
    {
      /* Rising Falling edge */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 800155a:	f022 011f 	bic.w	r1, r2, #31
 800155e:	f002 021f 	and.w	r2, r2, #31
 8001562:	594e      	ldr	r6, [r1, r5]
 8001564:	fa03 f202 	lsl.w	r2, r3, r2
 8001568:	4332      	orrs	r2, r6
 800156a:	514a      	str	r2, [r1, r5]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));      
 800156c:	6802      	ldr	r2, [r0, #0]
 800156e:	f022 011f 	bic.w	r1, r2, #31
 8001572:	f002 021f 	and.w	r2, r2, #31
 8001576:	5908      	ldr	r0, [r1, r4]
 8001578:	4093      	lsls	r3, r2
 800157a:	4303      	orrs	r3, r0
 800157c:	510b      	str	r3, [r1, r4]
 800157e:	bd70      	pop	{r4, r5, r6, pc}
 8001580:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    }
    else
    {
      tmp += EXTI_InitStruct->EXTI_Trigger + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 8001584:	f022 001f 	bic.w	r0, r2, #31
 8001588:	f501 3182 	add.w	r1, r1, #66560	; 0x10400

      *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 800158c:	f002 021f 	and.w	r2, r2, #31
 8001590:	580c      	ldr	r4, [r1, r0]
 8001592:	4093      	lsls	r3, r2
 8001594:	4323      	orrs	r3, r4
 8001596:	500b      	str	r3, [r1, r0]
 8001598:	bd70      	pop	{r4, r5, r6, pc}
 800159a:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 800159e:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
    }
  }
      
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 80015a2:	f023 041f 	bic.w	r4, r3, #31

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80015a6:	2001      	movs	r0, #1
 80015a8:	5911      	ldr	r1, [r2, r4]
 80015aa:	f003 031f 	and.w	r3, r3, #31
 80015ae:	fa00 f303 	lsl.w	r3, r0, r3
 80015b2:	ea21 0303 	bic.w	r3, r1, r3
 80015b6:	5113      	str	r3, [r2, r4]
 80015b8:	bd70      	pop	{r4, r5, r6, pc}
 80015ba:	bf00      	nop
 80015bc:	40010404 	.word	0x40010404
 80015c0:	40010408 	.word	0x40010408
 80015c4:	4001040c 	.word	0x4001040c

080015c8 <EXTI_GetITStatus>:
  ITStatus bitstatus = RESET;
  
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((*(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20)& (uint32_t)(1 << (EXTI_Line & 0x1F))) != (uint32_t)RESET)
 80015c8:	f020 021f 	bic.w	r2, r0, #31
 80015cc:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <EXTI_GetITStatus+0x1c>)
 80015ce:	f000 001f 	and.w	r0, r0, #31
 80015d2:	58d2      	ldr	r2, [r2, r3]
 80015d4:	2301      	movs	r3, #1
 80015d6:	4083      	lsls	r3, r0
 80015d8:	421a      	tst	r2, r3
  {
    bitstatus = RESET;
  }
  return bitstatus;
  
}
 80015da:	bf14      	ite	ne
 80015dc:	2001      	movne	r0, #1
 80015de:	2000      	moveq	r0, #0
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40010414 	.word	0x40010414

080015e8 <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE_EXT(EXTI_Line));
  
  *(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20) = (1 << (EXTI_Line & 0x1F));
 80015e8:	f020 011f 	bic.w	r1, r0, #31
 80015ec:	2301      	movs	r3, #1
 80015ee:	f000 001f 	and.w	r0, r0, #31
 80015f2:	4a02      	ldr	r2, [pc, #8]	; (80015fc <EXTI_ClearITPendingBit+0x14>)
 80015f4:	4083      	lsls	r3, r0
 80015f6:	508b      	str	r3, [r1, r2]
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	40010414 	.word	0x40010414

08001600 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001600:	4a39      	ldr	r2, [pc, #228]	; (80016e8 <SystemInit+0xe8>)
 8001602:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001606:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800160a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800160e:	4b37      	ldr	r3, [pc, #220]	; (80016ec <SystemInit+0xec>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	f042 0201 	orr.w	r2, r2, #1
 8001616:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8001618:	6859      	ldr	r1, [r3, #4]
 800161a:	4a35      	ldr	r2, [pc, #212]	; (80016f0 <SystemInit+0xf0>)
 800161c:	400a      	ands	r2, r1
 800161e:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001626:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800162a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001632:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800163a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800163c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800163e:	f022 020f 	bic.w	r2, r2, #15
 8001642:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8001644:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001646:	4a2b      	ldr	r2, [pc, #172]	; (80016f4 <SystemInit+0xf4>)
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001648:	b082      	sub	sp, #8

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 800164a:	400a      	ands	r2, r1
 800164c:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001652:	9200      	str	r2, [sp, #0]
 8001654:	9201      	str	r2, [sp, #4]
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration -----------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800165c:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001664:	9201      	str	r2, [sp, #4]
    StartUpCounter++;
 8001666:	9a00      	ldr	r2, [sp, #0]
 8001668:	3201      	adds	r2, #1
 800166a:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800166c:	9a01      	ldr	r2, [sp, #4]
 800166e:	b91a      	cbnz	r2, 8001678 <SystemInit+0x78>
 8001670:	9a00      	ldr	r2, [sp, #0]
 8001672:	f5b2 4fa0 	cmp.w	r2, #20480	; 0x5000
 8001676:	d1f2      	bne.n	800165e <SystemInit+0x5e>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 800167e:	bf18      	it	ne
 8001680:	2201      	movne	r2, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001682:	9201      	str	r2, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001684:	9a01      	ldr	r2, [sp, #4]
 8001686:	2a01      	cmp	r2, #1
 8001688:	d005      	beq.n	8001696 <SystemInit+0x96>
  SetSysClock();
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800168a:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <SystemInit+0xe8>)
 800168c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001690:	609a      	str	r2, [r3, #8]
#endif  
}
 8001692:	b002      	add	sp, #8
 8001694:	4770      	bx	lr
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8001696:	4a18      	ldr	r2, [pc, #96]	; (80016f8 <SystemInit+0xf8>)
 8001698:	2112      	movs	r1, #18
 800169a:	6011      	str	r1, [r2, #0]
 
     /* HCLK = SYSCLK / 1 */
     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	605a      	str	r2, [r3, #4]
       
     /* PCLK2 = HCLK / 1 */
     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	605a      	str	r2, [r3, #4]
     
     /* PCLK1 = HCLK / 2 */
     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80016aa:	605a      	str	r2, [r3, #4]

    /* PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80016b2:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL9);
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 80016ba:	605a      	str	r2, [r3, #4]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80016c2:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80016c4:	6819      	ldr	r1, [r3, #0]
 80016c6:	4a09      	ldr	r2, [pc, #36]	; (80016ec <SystemInit+0xec>)
 80016c8:	0189      	lsls	r1, r1, #6
 80016ca:	d5fb      	bpl.n	80016c4 <SystemInit+0xc4>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80016cc:	6851      	ldr	r1, [r2, #4]
 80016ce:	f021 0103 	bic.w	r1, r1, #3
 80016d2:	6051      	str	r1, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80016d4:	6851      	ldr	r1, [r2, #4]
 80016d6:	f041 0102 	orr.w	r1, r1, #2
 80016da:	6051      	str	r1, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	f002 020c 	and.w	r2, r2, #12
 80016e2:	2a08      	cmp	r2, #8
 80016e4:	d1fa      	bne.n	80016dc <SystemInit+0xdc>
 80016e6:	e7d0      	b.n	800168a <SystemInit+0x8a>
 80016e8:	e000ed00 	.word	0xe000ed00
 80016ec:	40021000 	.word	0x40021000
 80016f0:	f87fc00c 	.word	0xf87fc00c
 80016f4:	ff00fccc 	.word	0xff00fccc
 80016f8:	40022000 	.word	0x40022000

080016fc <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80016fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80016fe:	e003      	b.n	8001708 <LoopCopyDataInit>

08001700 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <LoopForever+0x2>)
	ldr	r3, [r3, r1]
 8001702:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001704:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001706:	3104      	adds	r1, #4

08001708 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001708:	480a      	ldr	r0, [pc, #40]	; (8001734 <LoopForever+0x6>)
	ldr	r3, =_edata
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <LoopForever+0xa>)
	adds	r2, r0, r1
 800170c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800170e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001710:	d3f6      	bcc.n	8001700 <CopyDataInit>
	ldr	r2, =_sbss
 8001712:	4a0a      	ldr	r2, [pc, #40]	; (800173c <LoopForever+0xe>)
	b	LoopFillZerobss
 8001714:	e002      	b.n	800171c <LoopFillZerobss>

08001716 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001716:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001718:	f842 3b04 	str.w	r3, [r2], #4

0800171c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800171c:	4b08      	ldr	r3, [pc, #32]	; (8001740 <LoopForever+0x12>)
	cmp	r2, r3
 800171e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001720:	d3f9      	bcc.n	8001716 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit 
 8001722:	f7ff ff6d 	bl	8001600 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001726:	f000 f80f 	bl	8001748 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800172a:	f7fe ff1d 	bl	8000568 <main>

0800172e <LoopForever>:

LoopForever:
    b LoopForever
 800172e:	e7fe      	b.n	800172e <LoopForever>
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8001730:	0800184c 	.word	0x0800184c
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001734:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001738:	20000000 	.word	0x20000000
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 800173c:	20000000 	.word	0x20000000
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8001740:	200001c0 	.word	0x200001c0

08001744 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001744:	e7fe      	b.n	8001744 <ADC1_2_IRQHandler>
	...

08001748 <__libc_init_array>:
 8001748:	b570      	push	{r4, r5, r6, lr}
 800174a:	4e0f      	ldr	r6, [pc, #60]	; (8001788 <__libc_init_array+0x40>)
 800174c:	4d0f      	ldr	r5, [pc, #60]	; (800178c <__libc_init_array+0x44>)
 800174e:	1b76      	subs	r6, r6, r5
 8001750:	10b6      	asrs	r6, r6, #2
 8001752:	bf18      	it	ne
 8001754:	2400      	movne	r4, #0
 8001756:	d005      	beq.n	8001764 <__libc_init_array+0x1c>
 8001758:	3401      	adds	r4, #1
 800175a:	f855 3b04 	ldr.w	r3, [r5], #4
 800175e:	4798      	blx	r3
 8001760:	42a6      	cmp	r6, r4
 8001762:	d1f9      	bne.n	8001758 <__libc_init_array+0x10>
 8001764:	4e0a      	ldr	r6, [pc, #40]	; (8001790 <__libc_init_array+0x48>)
 8001766:	4d0b      	ldr	r5, [pc, #44]	; (8001794 <__libc_init_array+0x4c>)
 8001768:	1b76      	subs	r6, r6, r5
 800176a:	f000 f863 	bl	8001834 <_init>
 800176e:	10b6      	asrs	r6, r6, #2
 8001770:	bf18      	it	ne
 8001772:	2400      	movne	r4, #0
 8001774:	d006      	beq.n	8001784 <__libc_init_array+0x3c>
 8001776:	3401      	adds	r4, #1
 8001778:	f855 3b04 	ldr.w	r3, [r5], #4
 800177c:	4798      	blx	r3
 800177e:	42a6      	cmp	r6, r4
 8001780:	d1f9      	bne.n	8001776 <__libc_init_array+0x2e>
 8001782:	bd70      	pop	{r4, r5, r6, pc}
 8001784:	bd70      	pop	{r4, r5, r6, pc}
 8001786:	bf00      	nop
	...

08001798 <memset>:
 8001798:	b470      	push	{r4, r5, r6}
 800179a:	0784      	lsls	r4, r0, #30
 800179c:	d046      	beq.n	800182c <memset+0x94>
 800179e:	1e54      	subs	r4, r2, #1
 80017a0:	2a00      	cmp	r2, #0
 80017a2:	d041      	beq.n	8001828 <memset+0x90>
 80017a4:	b2cd      	uxtb	r5, r1
 80017a6:	4603      	mov	r3, r0
 80017a8:	e002      	b.n	80017b0 <memset+0x18>
 80017aa:	1e62      	subs	r2, r4, #1
 80017ac:	b3e4      	cbz	r4, 8001828 <memset+0x90>
 80017ae:	4614      	mov	r4, r2
 80017b0:	f803 5b01 	strb.w	r5, [r3], #1
 80017b4:	079a      	lsls	r2, r3, #30
 80017b6:	d1f8      	bne.n	80017aa <memset+0x12>
 80017b8:	2c03      	cmp	r4, #3
 80017ba:	d92e      	bls.n	800181a <memset+0x82>
 80017bc:	b2cd      	uxtb	r5, r1
 80017be:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80017c2:	2c0f      	cmp	r4, #15
 80017c4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80017c8:	d919      	bls.n	80017fe <memset+0x66>
 80017ca:	f103 0210 	add.w	r2, r3, #16
 80017ce:	4626      	mov	r6, r4
 80017d0:	3e10      	subs	r6, #16
 80017d2:	2e0f      	cmp	r6, #15
 80017d4:	f842 5c10 	str.w	r5, [r2, #-16]
 80017d8:	f842 5c0c 	str.w	r5, [r2, #-12]
 80017dc:	f842 5c08 	str.w	r5, [r2, #-8]
 80017e0:	f842 5c04 	str.w	r5, [r2, #-4]
 80017e4:	f102 0210 	add.w	r2, r2, #16
 80017e8:	d8f2      	bhi.n	80017d0 <memset+0x38>
 80017ea:	f1a4 0210 	sub.w	r2, r4, #16
 80017ee:	f022 020f 	bic.w	r2, r2, #15
 80017f2:	f004 040f 	and.w	r4, r4, #15
 80017f6:	3210      	adds	r2, #16
 80017f8:	2c03      	cmp	r4, #3
 80017fa:	4413      	add	r3, r2
 80017fc:	d90d      	bls.n	800181a <memset+0x82>
 80017fe:	461e      	mov	r6, r3
 8001800:	4622      	mov	r2, r4
 8001802:	3a04      	subs	r2, #4
 8001804:	2a03      	cmp	r2, #3
 8001806:	f846 5b04 	str.w	r5, [r6], #4
 800180a:	d8fa      	bhi.n	8001802 <memset+0x6a>
 800180c:	1f22      	subs	r2, r4, #4
 800180e:	f022 0203 	bic.w	r2, r2, #3
 8001812:	3204      	adds	r2, #4
 8001814:	4413      	add	r3, r2
 8001816:	f004 0403 	and.w	r4, r4, #3
 800181a:	b12c      	cbz	r4, 8001828 <memset+0x90>
 800181c:	b2c9      	uxtb	r1, r1
 800181e:	441c      	add	r4, r3
 8001820:	f803 1b01 	strb.w	r1, [r3], #1
 8001824:	42a3      	cmp	r3, r4
 8001826:	d1fb      	bne.n	8001820 <memset+0x88>
 8001828:	bc70      	pop	{r4, r5, r6}
 800182a:	4770      	bx	lr
 800182c:	4614      	mov	r4, r2
 800182e:	4603      	mov	r3, r0
 8001830:	e7c2      	b.n	80017b8 <memset+0x20>
 8001832:	bf00      	nop

08001834 <_init>:
 8001834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001836:	bf00      	nop
 8001838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800183a:	bc08      	pop	{r3}
 800183c:	469e      	mov	lr, r3
 800183e:	4770      	bx	lr

08001840 <_fini>:
 8001840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001842:	bf00      	nop
 8001844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001846:	bc08      	pop	{r3}
 8001848:	469e      	mov	lr, r3
 800184a:	4770      	bx	lr
